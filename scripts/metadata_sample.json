{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "lookup": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 1,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 2,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U8"
              },
              "docs": []
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index",
                      "docs": []
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 4,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U32"
              },
              "docs": []
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 6,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U128"
              },
              "docs": []
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 8,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U64"
              },
              "docs": []
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 10,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 12,
                      "typeName": "Vec<DigestItem>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 12,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 13
                }
              },
              "docs": []
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": "ConsensusEngineId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 14,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 15,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 16
                }
              },
              "docs": []
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 17
                },
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 77,
                      "typeName": "Phase",
                      "docs": []
                    },
                    {
                      "name": "event",
                      "type": 17,
                      "typeName": "E",
                      "docs": []
                    },
                    {
                      "name": "topics",
                      "type": 78,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 17,
            "type": {
              "path": [
                "hashed_runtime",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 18,
                          "typeName": "frame_system::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 27,
                          "typeName": "pallet_grandpa::Event",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 32,
                          "typeName": "pallet_balances::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "name": null,
                          "type": 34,
                          "typeName": "pallet_transaction_payment::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 35,
                          "typeName": "pallet_sudo::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "TemplateModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 39,
                          "typeName": "pallet_template::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 40,
                          "typeName": "pallet_identity::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 41,
                          "typeName": "pallet_recovery::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 42,
                          "typeName": "pallet_indices::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 43,
                          "typeName": "pallet_treasury::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 44,
                          "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Membership",
                      "fields": [
                        {
                          "name": null,
                          "type": 46,
                          "typeName": "pallet_membership::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "NodeAuthorization",
                      "fields": [
                        {
                          "name": null,
                          "type": 47,
                          "typeName": "pallet_node_authorization::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Society",
                      "fields": [
                        {
                          "name": null,
                          "type": 52,
                          "typeName": "pallet_society::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 54,
                          "typeName": "pallet_bounties::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "name": null,
                          "type": 55,
                          "typeName": "pallet_uniques::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Fruniques",
                      "fields": [
                        {
                          "name": null,
                          "type": 61,
                          "typeName": "pallet_fruniques::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "GatedMarketplace",
                      "fields": [
                        {
                          "name": null,
                          "type": 62,
                          "typeName": "pallet_gated_marketplace::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 66,
                          "typeName": "pallet_assets::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "BitcoinVaults",
                      "fields": [
                        {
                          "name": null,
                          "type": 67,
                          "typeName": "pallet_bitcoin_vaults::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "RBAC",
                      "fields": [
                        {
                          "name": null,
                          "type": 68,
                          "typeName": "pallet_rbac::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ConfidentialDocs",
                      "fields": [
                        {
                          "name": null,
                          "type": 69,
                          "typeName": "pallet_confidential_docs::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "FundAdmin",
                      "fields": [
                        {
                          "name": null,
                          "type": 76,
                          "typeName": "pallet_fund_admin::Event<Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 22,
                          "typeName": "DispatchError",
                          "docs": []
                        },
                        {
                          "name": "dispatch_info",
                          "type": 19,
                          "typeName": "DispatchInfo",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "class",
                      "type": 20,
                      "typeName": "DispatchClass",
                      "docs": []
                    },
                    {
                      "name": "pays_fee",
                      "type": 21,
                      "typeName": "Pays",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "DispatchClass"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mandatory",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "Pays"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "No",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "CannotLookup",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BadOrigin",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "name": null,
                          "type": 23,
                          "typeName": "ModuleError",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "ConsumerRemaining",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NoProviders",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "TooManyConsumers",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "name": null,
                          "type": 24,
                          "typeName": "TokenError",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "name": null,
                          "type": 25,
                          "typeName": "ArithmeticError",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "name": null,
                          "type": 26,
                          "typeName": "TransactionalError",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "error",
                      "type": 14,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "BelowMinimum",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CannotCreate",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "UnknownAsset",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Unsupported",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "ArithmeticError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Overflow",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DivisionByZero",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NoLayer",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 28,
                          "typeName": "AuthorityList",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 28,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 29
                }
              },
              "docs": []
            }
          },
          {
            "id": 29,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  30,
                  8
                ]
              },
              "docs": []
            }
          },
          {
            "id": 30,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 31,
                      "typeName": "ed25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "destination_status",
                          "type": 33,
                          "typeName": "Status",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reserved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 38,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 37
                },
                {
                  "name": "E",
                  "type": 22
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "name": null,
                          "type": 37,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "name": null,
                          "type": 22,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 37,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": []
              },
              "docs": []
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "pallet_template",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SomethingStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event documentation should end with an array that provides descriptive names for event",
                        "parameters. [something, who]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IdentitySet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A name was set or reset (which will remove all judgements)."
                      ]
                    },
                    {
                      "name": "IdentityCleared",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A name was cleared, and the given balance returned."
                      ]
                    },
                    {
                      "name": "IdentityKilled",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A name was removed and the given balance slashed."
                      ]
                    },
                    {
                      "name": "JudgementRequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A judgement was asked from a registrar."
                      ]
                    },
                    {
                      "name": "JudgementUnrequested",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A judgement request was retracted."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A judgement was given by a registrar."
                      ]
                    },
                    {
                      "name": "RegistrarAdded",
                      "fields": [
                        {
                          "name": "registrar_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A registrar was added."
                      ]
                    },
                    {
                      "name": "SubIdentityAdded",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A sub-identity was added to an identity and the deposit paid."
                      ]
                    },
                    {
                      "name": "SubIdentityRemoved",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A sub-identity was removed from an identity and the deposit freed."
                      ]
                    },
                    {
                      "name": "SubIdentityRevoked",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "main",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "deposit",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A sub-identity was cleared, and the given deposit repatriated from the",
                        "main identity account to the sub-identity account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoveryCreated",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A recovery process has been set up for an account."
                      ]
                    },
                    {
                      "name": "RecoveryInitiated",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A recovery process has been initiated for lost account by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryVouched",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been vouched for by sender."
                      ]
                    },
                    {
                      "name": "RecoveryClosed",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A recovery process for lost account by rescuer account has been closed."
                      ]
                    },
                    {
                      "name": "AccountRecovered",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Lost account has been successfully recovered by rescuer account."
                      ]
                    },
                    {
                      "name": "RecoveryRemoved",
                      "fields": [
                        {
                          "name": "lost_account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A recovery process has been removed for an account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IndexAssigned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A account index was assigned."
                      ]
                    },
                    {
                      "name": "IndexFreed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A account index has been freed up (unassigned)."
                      ]
                    },
                    {
                      "name": "IndexFrozen",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A account index has been frozen to its current account ID."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New proposal."
                      ]
                    },
                    {
                      "name": "Spending",
                      "fields": [
                        {
                          "name": "budget_remaining",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "We have ended a spend period and will now allocate funds."
                      ]
                    },
                    {
                      "name": "Awarded",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "award",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some funds have been allocated."
                      ]
                    },
                    {
                      "name": "Rejected",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "slashed",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "Burnt",
                      "fields": [
                        {
                          "name": "burnt_funds",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some of our funds have been burnt."
                      ]
                    },
                    {
                      "name": "Rollover",
                      "fields": [
                        {
                          "name": "rollover_balance",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Spending has finished; this is the amount that rolls over until next spend."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some funds have been deposited."
                      ]
                    },
                    {
                      "name": "SpendApproved",
                      "fields": [
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A new spend proposal has been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_index",
                          "type": 4,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A motion (given hash) has been proposed (by given account) with a threshold (given",
                        "`MemberCount`)."
                      ]
                    },
                    {
                      "name": "Voted",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "voted",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A motion (given hash) has been voted on by given account, leaving",
                        "a tally (yes votes and no votes given respectively as `MemberCount`)."
                      ]
                    },
                    {
                      "name": "Approved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A motion was approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Disapproved",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A motion was not approved by the required threshold."
                      ]
                    },
                    {
                      "name": "Executed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A motion was executed; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "MemberExecuted",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "result",
                          "type": 36,
                          "typeName": "DispatchResult",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A single member did some action; result will be `Ok` if it returned without error."
                      ]
                    },
                    {
                      "name": "Closed",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "yes",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "no",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal was closed because its threshold was reached or after its duration was up."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Bool"
              },
              "docs": []
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MemberAdded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The given member was added; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MemberRemoved",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The given member was removed; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersSwapped",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Two members were swapped; see the transaction for who."
                      ]
                    },
                    {
                      "name": "MembersReset",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The membership was reset; see the transaction for who the new set is."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "One of the members' keys changed."
                      ]
                    },
                    {
                      "name": "Dummy",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Phantom member, never used."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_node_authorization",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NodeAdded",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The given well known node was added."
                      ]
                    },
                    {
                      "name": "NodeRemoved",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The given well known node was removed."
                      ]
                    },
                    {
                      "name": "NodeSwapped",
                      "fields": [
                        {
                          "name": "removed",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "added",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The given well known node was swapped; first item was removed,",
                        "the latter was added."
                      ]
                    },
                    {
                      "name": "NodesReset",
                      "fields": [
                        {
                          "name": "nodes",
                          "type": 49,
                          "typeName": "Vec<(PeerId, T::AccountId)>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The given well known nodes were reset."
                      ]
                    },
                    {
                      "name": "NodeClaimed",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The given node was claimed by a user."
                      ]
                    },
                    {
                      "name": "ClaimRemoved",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The given claim was removed by its owner."
                      ]
                    },
                    {
                      "name": "NodeTransferred",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The node was transferred to another account."
                      ]
                    },
                    {
                      "name": "ConnectionsAdded",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "allowed_connections",
                          "type": 51,
                          "typeName": "Vec<PeerId>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The allowed connections were added to a node."
                      ]
                    },
                    {
                      "name": "ConnectionsRemoved",
                      "fields": [
                        {
                          "name": "peer_id",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "allowed_connections",
                          "type": 51,
                          "typeName": "Vec<PeerId>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The allowed connections were removed from a node."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "sp_core",
                "OpaquePeerId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 49,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 50
                }
              },
              "docs": []
            }
          },
          {
            "id": 50,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  48,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 51,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 48
                }
              },
              "docs": []
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Founded",
                      "fields": [
                        {
                          "name": "founder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "The society is founded by the given identity."
                      ]
                    },
                    {
                      "name": "Bid",
                      "fields": [
                        {
                          "name": "candidate_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "offer",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A membership bid just happened. The given account is the candidate's ID and their offer",
                        "is the second."
                      ]
                    },
                    {
                      "name": "Vouch",
                      "fields": [
                        {
                          "name": "candidate_id",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "offer",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "vouching",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A membership bid just happened by vouching. The given account is the candidate's ID and",
                        "their offer is the second. The vouching party is the third."
                      ]
                    },
                    {
                      "name": "AutoUnbid",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A candidate was dropped (due to an excess of bids in the system)."
                      ]
                    },
                    {
                      "name": "Unbid",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A candidate was dropped (by their request)."
                      ]
                    },
                    {
                      "name": "Unvouch",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A candidate was dropped (by request of who vouched for them)."
                      ]
                    },
                    {
                      "name": "Inducted",
                      "fields": [
                        {
                          "name": "primary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "candidates",
                          "type": 53,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A group of candidates have been inducted. The batch's primary is the first value, the",
                        "batch in full is the second."
                      ]
                    },
                    {
                      "name": "SuspendedMemberJudgement",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "judged",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A suspended member has been judged."
                      ]
                    },
                    {
                      "name": "CandidateSuspended",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "A candidate has been suspended"
                      ]
                    },
                    {
                      "name": "MemberSuspended",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A member has been suspended"
                      ]
                    },
                    {
                      "name": "Challenged",
                      "fields": [
                        {
                          "name": "member",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A member has been challenged"
                      ]
                    },
                    {
                      "name": "Vote",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "A vote has been placed"
                      ]
                    },
                    {
                      "name": "DefenderVote",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "vote",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "A vote has been placed for a defending member"
                      ]
                    },
                    {
                      "name": "NewMaxMembers",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "A new \\[max\\] member count has been set"
                      ]
                    },
                    {
                      "name": "Unfounded",
                      "fields": [
                        {
                          "name": "founder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Society is unfounded."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Some funds were deposited into the society account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 0
                }
              },
              "docs": []
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BountyProposed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New bounty proposal."
                      ]
                    },
                    {
                      "name": "BountyRejected",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "bond",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bounty proposal was rejected; funds were slashed."
                      ]
                    },
                    {
                      "name": "BountyBecameActive",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A bounty proposal is funded and became active."
                      ]
                    },
                    {
                      "name": "BountyAwarded",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A bounty is awarded to a beneficiary."
                      ]
                    },
                    {
                      "name": "BountyClaimed",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "payout",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A bounty is claimed by beneficiary."
                      ]
                    },
                    {
                      "name": "BountyCanceled",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A bounty is cancelled."
                      ]
                    },
                    {
                      "name": "BountyExtended",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A bounty expiry is extended."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A `collection` was created."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A `collection` was force-created."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A `collection` was destroyed."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "An `item` was issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An `item` was transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An `item` was destroyed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some `item` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some `item` was thawed."
                      ]
                    },
                    {
                      "name": "CollectionFrozen",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some `collection` was frozen."
                      ]
                    },
                    {
                      "name": "CollectionThawed",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some `collection` was thawed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "new_owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "An `item` of a `collection` has been approved by the `owner` for transfer by",
                        "a `delegate`."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "An approval for a `delegate` account to transfer the `item` of an item",
                        "`collection` was cancelled by its `owner`."
                      ]
                    },
                    {
                      "name": "ItemStatusChanged",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "A `collection` has had its attributes changed by the `Force` origin."
                      ]
                    },
                    {
                      "name": "CollectionMetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 56,
                          "typeName": "BoundedVec<u8, T::StringLimit>",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "New metadata has been set for a `collection`."
                      ]
                    },
                    {
                      "name": "CollectionMetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Metadata has been cleared for a `collection`."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 56,
                          "typeName": "BoundedVec<u8, T::StringLimit>",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "New metadata has been set for an item."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "Redeposited",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "successful_items",
                          "type": 57,
                          "typeName": "Vec<T::ItemId>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Metadata has been cleared for an item."
                      ]
                    },
                    {
                      "name": "AttributeSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "maybe_item",
                          "type": 58,
                          "typeName": "Option<T::ItemId>",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 59,
                          "typeName": "BoundedVec<u8, T::KeyLimit>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 60,
                          "typeName": "BoundedVec<u8, T::ValueLimit>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "New attribute metadata has been set for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "AttributeCleared",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "maybe_item",
                          "type": 58,
                          "typeName": "Option<T::ItemId>",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 59,
                          "typeName": "BoundedVec<u8, T::KeyLimit>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Attribute metadata has been cleared for a `collection` or `item`."
                      ]
                    },
                    {
                      "name": "OwnershipAcceptanceChanged",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "maybe_collection",
                          "type": 58,
                          "typeName": "Option<T::CollectionId>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Ownership acceptance has changed for an account."
                      ]
                    },
                    {
                      "name": "CollectionMaxSupplySet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Max supply has been set for a collection."
                      ]
                    },
                    {
                      "name": "ItemPriceSet",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>",
                          "docs": []
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 38,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "The price was set for the instance."
                      ]
                    },
                    {
                      "name": "ItemPriceRemoved",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "The price for the instance was removed."
                      ]
                    },
                    {
                      "name": "ItemBought",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>",
                          "docs": []
                        },
                        {
                          "name": "seller",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "buyer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": [
                        "An item was bought."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 57,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "pallet_fruniques",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FruniqueCollectionCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "FruniqueCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "FruniqueDivided",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "FruniqueVerified",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "CollectionId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "ItemId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "NextFrunique",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 62,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MarketplaceStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Marketplaces stored. [owner, admin, market_id]"
                      ]
                    },
                    {
                      "name": "ApplicationStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Application stored on the specified marketplace. [application_id, market_id]"
                      ]
                    },
                    {
                      "name": "ApplicationProcessed",
                      "fields": [
                        {
                          "name": null,
                          "type": 63,
                          "typeName": "AccountOrApplication<T>",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 64,
                          "typeName": "ApplicationStatus",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "An applicant was accepted or rejected on the marketplace. [AccountOrApplication, market_id, status]"
                      ]
                    },
                    {
                      "name": "AuthorityAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "MarketplaceRole",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add a new authority to the selected marketplace [account, authority]"
                      ]
                    },
                    {
                      "name": "AuthorityRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 65,
                          "typeName": "MarketplaceRole",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Remove the selected authority from the selected marketplace [account, authority]"
                      ]
                    },
                    {
                      "name": "MarketplaceLabelUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The label of the selected marketplace has been updated. [market_id]"
                      ]
                    },
                    {
                      "name": "MarketplaceRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "The selected marketplace has been removed. [market_id]"
                      ]
                    },
                    {
                      "name": "OfferStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Offer stored. [collection_id, item_id]"
                      ]
                    },
                    {
                      "name": "OfferWasAccepted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Offer was accepted [offer_id, account]"
                      ]
                    },
                    {
                      "name": "OfferDuplicated",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Offer was duplicated. [new_offer_id, new_marketplace_id]"
                      ]
                    },
                    {
                      "name": "OfferRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Offer was removed. [offer_id], [marketplace_id]"
                      ]
                    },
                    {
                      "name": "MarketplaceSetupCompleted",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Initial palllet setup"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "AccountOrApplication"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Account",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Application",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "ApplicationStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Approved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Rejected",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 65,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "MarketplaceRole"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Owner",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Admin",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Appraiser",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "RedemptionSpecialist",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Participant",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Created",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "creator",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Some asset class was created."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "total_supply",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Some assets were issued."
                      ]
                    },
                    {
                      "name": "Transferred",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Some assets were transferred."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some assets were destroyed."
                      ]
                    },
                    {
                      "name": "TeamChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The management team changed."
                      ]
                    },
                    {
                      "name": "OwnerChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "The owner changed."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some account `who` was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some account `who` was thawed."
                      ]
                    },
                    {
                      "name": "AssetFrozen",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some asset `asset_id` was frozen."
                      ]
                    },
                    {
                      "name": "AssetThawed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some asset `asset_id` was thawed."
                      ]
                    },
                    {
                      "name": "Destroyed",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "An asset class was destroyed."
                      ]
                    },
                    {
                      "name": "ForceCreated",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some asset class was force-created."
                      ]
                    },
                    {
                      "name": "MetadataSet",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "New metadata has been set for an asset."
                      ]
                    },
                    {
                      "name": "MetadataCleared",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Metadata has been cleared for an asset."
                      ]
                    },
                    {
                      "name": "ApprovedTransfer",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "(Additional) funds have been approved for transfer to a destination account."
                      ]
                    },
                    {
                      "name": "ApprovalCancelled",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "An approval for account `delegate` was cancelled by `owner`."
                      ]
                    },
                    {
                      "name": "TransferredApproved",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "An `amount` was transferred in its entirety from `owner` to `destination` by",
                        "the approved `delegate`."
                      ]
                    },
                    {
                      "name": "AssetStatusChanged",
                      "fields": [
                        {
                          "name": "asset_id",
                          "type": 4,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "An asset has had its attributes changed by the `Force` origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "XPubStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Xpub and hash stored"
                      ]
                    },
                    {
                      "name": "XPubRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Removed Xpub previously linked to the account"
                      ]
                    },
                    {
                      "name": "PSBTStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "The PBST was succesfully inserted by an OCW"
                      ]
                    },
                    {
                      "name": "VaultStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "The vault was succesfully inserted and linked to the account as owner"
                      ]
                    },
                    {
                      "name": "VaultRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "The vault was succesfully removed by its owner"
                      ]
                    },
                    {
                      "name": "DescriptorsStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "An offchain worker inserted a vault's descriptor "
                      ]
                    },
                    {
                      "name": "ProposalStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A proposal has been inserted. "
                      ]
                    },
                    {
                      "name": "ProposalRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "A proposal has been removed."
                      ]
                    },
                    {
                      "name": "ProposalSigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "The user has uploaded its own PSBT"
                      ]
                    },
                    {
                      "name": "ProposalFinalized",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "A proposal has been set to be finalized"
                      ]
                    },
                    {
                      "name": "ProposalTxIdStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "A proposal tx has been inserted by an OCW"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "pallet_rbac",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RolesStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "PalletId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An initial roles config was stored [pallet_id]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VaultStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "UserId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "PublicKey",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 70,
                          "typeName": "Vault<T>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Vault stored "
                      ]
                    },
                    {
                      "name": "OwnedDocStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "OwnedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Owned confidential document stored"
                      ]
                    },
                    {
                      "name": "OwnedDocRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 72,
                          "typeName": "OwnedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Owned confidential document removed"
                      ]
                    },
                    {
                      "name": "SharedDocStored",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "SharedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Shared confidential document stored"
                      ]
                    },
                    {
                      "name": "SharedDocUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "SharedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Shared confidential document metadata updated"
                      ]
                    },
                    {
                      "name": "SharedDocRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 75,
                          "typeName": "SharedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Shared confidential document removed"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "types",
                "Vault"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "cid",
                      "type": 71,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "types",
                "OwnedDoc"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "cid",
                      "type": 71,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 73,
                      "typeName": "DocName<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 74,
                      "typeName": "DocDesc<T>",
                      "docs": []
                    },
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 73,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 74,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "types",
                "SharedDoc"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "cid",
                      "type": 71,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 73,
                      "typeName": "DocName<T>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 74,
                      "typeName": "DocDesc<T>",
                      "docs": []
                    },
                    {
                      "name": "from",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "to",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "pallet_fund_admin",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProjectCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Project was created successfully"
                      ]
                    },
                    {
                      "name": "ProxySetupCompleted",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Proxy initial setup completed"
                      ]
                    },
                    {
                      "name": "UserAdded",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "User registered successfully"
                      ]
                    },
                    {
                      "name": "ProjectEdited",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Project was edited"
                      ]
                    },
                    {
                      "name": "ProjectDeleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Project was deleted"
                      ]
                    },
                    {
                      "name": "AdministratorAssigned",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Administrator added"
                      ]
                    },
                    {
                      "name": "AdministratorRemoved",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Administrator removed"
                      ]
                    },
                    {
                      "name": "UsersAssignationCompleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Users has been assigned from the selected project"
                      ]
                    },
                    {
                      "name": "UsersUnassignationCompleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Users has been removed from the selected project"
                      ]
                    },
                    {
                      "name": "UserUpdated",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "User info updated"
                      ]
                    },
                    {
                      "name": "UserDeleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "User removed"
                      ]
                    },
                    {
                      "name": "ExpenditureCreated",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Expenditure was created successfully"
                      ]
                    },
                    {
                      "name": "ExpenditureEdited",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Expenditure was edited successfully"
                      ]
                    },
                    {
                      "name": "ExpenditureDeleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Expenditure was deleted successfully"
                      ]
                    },
                    {
                      "name": "TransactionsCompleted",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Trasactions was completed successfully"
                      ]
                    },
                    {
                      "name": "TransactionCreated",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Transaction was created successfully"
                      ]
                    },
                    {
                      "name": "TransactionEdited",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Transaction was edited successfully"
                      ]
                    },
                    {
                      "name": "TransactionDeleted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Transaction was deleted successfully"
                      ]
                    },
                    {
                      "name": "UsersExecuted",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "Users extrinsic was completed successfully"
                      ]
                    },
                    {
                      "name": "UsersAssignationExecuted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Assign users extrinsic was completed successfully"
                      ]
                    },
                    {
                      "name": "DrawdownSubmitted",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Drawdown was submitted successfully"
                      ]
                    },
                    {
                      "name": "DrawdownApproved",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Drawdown was approved successfully"
                      ]
                    },
                    {
                      "name": "DrawdownRejected",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Drawdown was rejected successfully"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": null,
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Finalization",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Initialization",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 78,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 9
                }
              },
              "docs": []
            }
          },
          {
            "id": 79,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 80
                }
              },
              "docs": []
            }
          },
          {
            "id": 80,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 82,
                      "typeName": "codec::Compact<u32>",
                      "docs": []
                    },
                    {
                      "name": "spec_name",
                      "type": 83,
                      "typeName": "sp_runtime::RuntimeString",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 82,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 4
                }
              },
              "docs": []
            }
          },
          {
            "id": 83,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "Str"
              },
              "docs": []
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "fill_block",
                      "fields": [
                        {
                          "name": "ratio",
                          "type": 85,
                          "typeName": "Perbill",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A dispatch that will fill the block weight up to the given ratio."
                      ]
                    },
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "# <weight>",
                        "- `O(1)`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "# <weight>",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                        "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                        "  expensive).",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime, but generally this is very",
                        "expensive. We will treat this as a full block.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "# <weight>",
                        "- `O(C)` where `C` length of `code`",
                        "- 1 storage write (codec `O(C)`).",
                        "- 1 digest item.",
                        "- 1 event.",
                        "The weight of this function is dependent on the runtime. We will treat this as a full",
                        "block. # </weight>"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 86,
                          "typeName": "Vec<KeyValue>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 88,
                          "typeName": "Vec<Key>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 10,
                          "typeName": "Key",
                          "docs": []
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 86,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 87
                }
              },
              "docs": []
            }
          },
          {
            "id": 87,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  10,
                  10
                ]
              },
              "docs": []
            }
          },
          {
            "id": 88,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 10
                }
              },
              "docs": []
            }
          },
          {
            "id": 89,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "per_class",
                      "type": 90,
                      "typeName": "PerDispatchClass<WeightsPerClass>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 90,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 91
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 91,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 91,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 91,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 92,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "max_total",
                      "type": 92,
                      "typeName": "Option<Weight>",
                      "docs": []
                    },
                    {
                      "name": "reserved",
                      "type": 92,
                      "typeName": "Option<Weight>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 8,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 94,
                      "typeName": "PerDispatchClass<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "frame_support",
                "weights",
                "RuntimeDbWeight"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    },
                    {
                      "name": "write",
                      "type": 8,
                      "typeName": "Weight",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 83,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "impl_name",
                      "type": 83,
                      "typeName": "RuntimeString",
                      "docs": []
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "apis",
                      "type": 97,
                      "typeName": "ApisVec",
                      "docs": []
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 98
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 98,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 98,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 99
                }
              },
              "docs": []
            }
          },
          {
            "id": 99,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  100,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 100,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 101,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "primitive": "U16"
              },
              "docs": []
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 105,
                          "typeName": "T::Moment",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "# <weight>",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 8
                }
              },
              "docs": []
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 107
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 109,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "sp_consensus_aura",
                "sr25519",
                "app_sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 108,
                      "typeName": "sr25519::Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 109,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 107
                }
              },
              "docs": []
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Paused",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    },
                    {
                      "name": "next_authorities",
                      "type": 113,
                      "typeName": "BoundedAuthorityList<Limit>",
                      "docs": []
                    },
                    {
                      "name": "forced",
                      "type": 58,
                      "typeName": "Option<N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 29
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 28,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 115,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 126,
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 115,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                          "docs": []
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 126,
                          "typeName": "T::KeyOwnerProof",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                        "",
                        "This will trigger a forced authority set change at the beginning of the next session, to",
                        "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                        "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                        "The block production rate (which may be slowed down because of finality lagging) should",
                        "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                        "authority will start voting on top of `best_finalized_block_number` for new finalized",
                        "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                        "block of all validators of the new authority set.",
                        "",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 8,
                      "typeName": "SetId",
                      "docs": []
                    },
                    {
                      "name": "equivocation",
                      "type": 116,
                      "typeName": "Equivocation<H, N>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "name": null,
                          "type": 117,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "name": null,
                          "type": 123,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 30
                },
                {
                  "name": "V",
                  "type": 118
                },
                {
                  "name": "S",
                  "type": 119
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": 30,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 122,
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": 122,
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "sp_finality_grandpa",
                "app",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 120,
                      "typeName": "ed25519::Signature",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 121,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 121,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 122,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  118,
                  119
                ]
              },
              "docs": []
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 30
                },
                {
                  "name": "V",
                  "type": 124
                },
                {
                  "name": "S",
                  "type": 119
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "identity",
                      "type": 30,
                      "typeName": "Id",
                      "docs": []
                    },
                    {
                      "name": "first",
                      "type": 125,
                      "typeName": "(V, S)",
                      "docs": []
                    },
                    {
                      "name": "second",
                      "type": 125,
                      "typeName": "(V, S)",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 9
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 9,
                      "typeName": "H",
                      "docs": []
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 125,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  124,
                  119
                ]
              },
              "docs": []
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 129
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 131,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 100,
                      "typeName": "LockIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "reasons",
                      "type": 130,
                      "typeName": "Reasons",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Misc",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "All",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 131,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 129
                }
              },
              "docs": []
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 133
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 134,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 100
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 100,
                      "typeName": "ReserveIdentifier",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 134,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 133
                }
              },
              "docs": []
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "pallet_balances",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1_0_0",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2_0_0",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "# <weight>",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account.",
                        "---------------------------------",
                        "- Origin account is already in memory, so no DB operations for them.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "new_free",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "new_reserved",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "# <weight>",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "keep_alive",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). # <weight>",
                        "- O(1). Just like transfer, but reading the user's transferable balance first.",
                        "  #</weight>"
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 37
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "name": null,
                          "type": 138,
                          "typeName": "AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": "[u8; 20]",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 138,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 37
                }
              },
              "docs": []
            }
          },
          {
            "id": 139,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 140,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "compact": {
                  "type": 6
                }
              },
              "docs": []
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Balance too low to send value"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 6,
                      "typeName": "u128",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "V2",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 145,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 145,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- The weight of this call is defined by the caller.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB change.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 145,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "- Limited storage reads.",
                        "- One DB write (event).",
                        "- Weight of derivative `call` execution + 10,000.",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "hashed_runtime",
                "Call"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "name": null,
                          "type": 84,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "name": null,
                          "type": 104,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "name": null,
                          "type": 114,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "name": null,
                          "type": 136,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "name": null,
                          "type": 144,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "TemplateModule",
                      "fields": [
                        {
                          "name": null,
                          "type": 146,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TemplateModule, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Identity",
                      "fields": [
                        {
                          "name": null,
                          "type": 149,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Recovery",
                      "fields": [
                        {
                          "name": null,
                          "type": 190,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Indices",
                      "fields": [
                        {
                          "name": null,
                          "type": 191,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Treasury",
                      "fields": [
                        {
                          "name": null,
                          "type": 192,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Council",
                      "fields": [
                        {
                          "name": null,
                          "type": 193,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Membership",
                      "fields": [
                        {
                          "name": null,
                          "type": 194,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Membership, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "NodeAuthorization",
                      "fields": [
                        {
                          "name": null,
                          "type": 195,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NodeAuthorization, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Society",
                      "fields": [
                        {
                          "name": null,
                          "type": 196,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Bounties",
                      "fields": [
                        {
                          "name": null,
                          "type": 198,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Uniques",
                      "fields": [
                        {
                          "name": null,
                          "type": 199,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Fruniques",
                      "fields": [
                        {
                          "name": null,
                          "type": 203,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Fruniques, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "GatedMarketplace",
                      "fields": [
                        {
                          "name": null,
                          "type": 209,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<GatedMarketplace, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Assets",
                      "fields": [
                        {
                          "name": null,
                          "type": 219,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "BitcoinVaults",
                      "fields": [
                        {
                          "name": null,
                          "type": 221,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BitcoinVaults, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "RBAC",
                      "fields": [
                        {
                          "name": null,
                          "type": 241,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RBAC, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "ConfidentialDocs",
                      "fields": [
                        {
                          "name": null,
                          "type": 242,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConfidentialDocs, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "FundAdmin",
                      "fields": [
                        {
                          "name": null,
                          "type": 243,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FundAdmin, Runtime>",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "pallet_template",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "do_something",
                      "fields": [
                        {
                          "name": "something",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An example dispatchable that takes a singles value as a parameter, writes the value to",
                        "storage and emits an event. This function must be dispatched by a signed extrinsic."
                      ]
                    },
                    {
                      "name": "cause_error",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "An example dispatchable that may throw a custom error."
                      ]
                    },
                    {
                      "name": "insert_my_bytes",
                      "fields": [
                        {
                          "name": "optional_bytes",
                          "type": 147,
                          "typeName": "Option<MyBytes>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 148
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 148,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_registrar",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a registrar to the system.",
                        "",
                        "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                        "",
                        "- `account`: the account of the registrar.",
                        "",
                        "Emits `RegistrarAdded` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                        "- One storage mutation (codec `O(R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_identity",
                      "fields": [
                        {
                          "name": "info",
                          "type": 150,
                          "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set an account's identity information and reserve the appropriate deposit.",
                        "",
                        "If the account already has identity information, the deposit is taken as part payment",
                        "for the new deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `info`: The identity information.",
                        "",
                        "Emits `IdentitySet` if successful.",
                        "",
                        "# <weight>",
                        "- `O(X + X' + R)`",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                        "  - where `R` judgements-count (registrar-count-bounded)",
                        "- One balance reserve operation.",
                        "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_subs",
                      "fields": [
                        {
                          "name": "subs",
                          "type": 185,
                          "typeName": "Vec<(T::AccountId, Data)>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the sub-accounts of the sender.",
                        "",
                        "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                        "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "- `subs`: The identity's (new) sub-accounts.",
                        "",
                        "# <weight>",
                        "- `O(P + S)`",
                        "  - where `P` old-subs-count (hard- and deposit-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "- At most one balance operations.",
                        "- DB:",
                        "  - `P + S` storage mutations (codec complexity `O(1)`)",
                        "  - One storage read (codec complexity `O(P)`).",
                        "  - One storage write (codec complexity `O(S)`).",
                        "  - One storage-exists (`IdentityOf::contains_key`).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "clear_identity",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Clear an account's identity info and all sub-accounts and return all deposits.",
                        "",
                        "Payment: All reserved balances on the account are returned.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "identity.",
                        "",
                        "Emits `IdentityCleared` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`",
                        "  - where `R` registrar-count (governance-bounded).",
                        "  - where `S` subs-count (hard- and deposit-bounded).",
                        "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                        "- One balance-unreserve operation.",
                        "- `2` storage reads and `S + 2` storage deletions.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "request_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 82,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "max_fee",
                          "type": 140,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Request a judgement from a registrar.",
                        "",
                        "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                        "given.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is requested.",
                        "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                        "",
                        "```nocompile",
                        "Self::registrars().get(reg_index).unwrap().fee",
                        "```",
                        "",
                        "Emits `JudgementRequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "cancel_request",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 4,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Cancel a previous request.",
                        "",
                        "Payment: A previously reserved deposit is returned on success.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a",
                        "registered identity.",
                        "",
                        "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                        "",
                        "Emits `JudgementUnrequested` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-reserve operation.",
                        "- One storage mutation `O(R + X)`.",
                        "- One event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fee",
                      "fields": [
                        {
                          "name": "index",
                          "type": 82,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 140,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Set the fee required for a judgement to be requested from a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fee`: the new fee.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_account_id",
                      "fields": [
                        {
                          "name": "index",
                          "type": 82,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Change the account associated with a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `new`: the new account ID.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_fields",
                      "fields": [
                        {
                          "name": "index",
                          "type": 82,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "fields",
                          "type": 187,
                          "typeName": "IdentityFields",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Set the field information for a registrar.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `index`.",
                        "",
                        "- `index`: the index of the registrar whose fee is to be set.",
                        "- `fields`: the fields that the registrar concerns themselves with.",
                        "",
                        "# <weight>",
                        "- `O(R)`.",
                        "- One storage mutation `O(R)`.",
                        "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "provide_judgement",
                      "fields": [
                        {
                          "name": "reg_index",
                          "type": 82,
                          "typeName": "RegistrarIndex",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "judgement",
                          "type": 189,
                          "typeName": "Judgement<BalanceOf<T>>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Provide a judgement for an account's identity.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                        "of the registrar whose index is `reg_index`.",
                        "",
                        "- `reg_index`: the index of the registrar whose judgement is being made.",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                        "",
                        "Emits `JudgementGiven` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + X)`.",
                        "- One balance-transfer operation.",
                        "- Up to one account-lookup operation.",
                        "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "kill_identity",
                      "fields": [
                        {
                          "name": "target",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Remove an account's identity and sub-account information and slash the deposits.",
                        "",
                        "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                        "`Slash`. Verification request deposits are not returned; they should be cancelled",
                        "manually using `cancel_request`.",
                        "",
                        "The dispatch origin for this call must match `T::ForceOrigin`.",
                        "",
                        "- `target`: the account whose identity the judgement is upon. This must be an account",
                        "  with a registered identity.",
                        "",
                        "Emits `IdentityKilled` if successful.",
                        "",
                        "# <weight>",
                        "- `O(R + S + X)`.",
                        "- One balance-reserve operation.",
                        "- `S + 2` storage mutations.",
                        "- One event.",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "add_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 153,
                          "typeName": "Data",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Add the given account to the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "rename_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 153,
                          "typeName": "Data",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Alter the associated name of the given sub-account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "remove_sub",
                      "fields": [
                        {
                          "name": "sub",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Remove the given account from the sender's subs.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "sub identity of `sub`."
                      ]
                    },
                    {
                      "name": "quit_sub",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Remove the sender as a sub-account.",
                        "",
                        "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                        "to the sender (*not* the original depositor).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                        "super-identity.",
                        "",
                        "NOTE: This should not normally be used, but is provided in the case that the non-",
                        "controller of an account is maliciously registered as a sub-account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Identity pallet declaration."
              ]
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityInfo"
              ],
              "params": [
                {
                  "name": "FieldLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "additional",
                      "type": 151,
                      "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                      "docs": []
                    },
                    {
                      "name": "display",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "legal",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "web",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "riot",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "email",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "pgp_fingerprint",
                      "type": 184,
                      "typeName": "Option<[u8; 20]>",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    },
                    {
                      "name": "twitter",
                      "type": 153,
                      "typeName": "Data",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 152
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 183,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 152,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  153,
                  153
                ]
              },
              "docs": []
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Data"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Raw0",
                      "fields": [
                        {
                          "name": null,
                          "type": 154,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Raw1",
                      "fields": [
                        {
                          "name": null,
                          "type": 155,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Raw2",
                      "fields": [
                        {
                          "name": null,
                          "type": 156,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Raw3",
                      "fields": [
                        {
                          "name": null,
                          "type": 157,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Raw4",
                      "fields": [
                        {
                          "name": null,
                          "type": 14,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Raw5",
                      "fields": [
                        {
                          "name": null,
                          "type": 158,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Raw6",
                      "fields": [
                        {
                          "name": null,
                          "type": 159,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Raw7",
                      "fields": [
                        {
                          "name": null,
                          "type": 160,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Raw8",
                      "fields": [
                        {
                          "name": null,
                          "type": 100,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Raw9",
                      "fields": [
                        {
                          "name": null,
                          "type": 161,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Raw10",
                      "fields": [
                        {
                          "name": null,
                          "type": 162,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Raw11",
                      "fields": [
                        {
                          "name": null,
                          "type": 163,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Raw12",
                      "fields": [
                        {
                          "name": null,
                          "type": 164,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Raw13",
                      "fields": [
                        {
                          "name": null,
                          "type": 165,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Raw14",
                      "fields": [
                        {
                          "name": null,
                          "type": 166,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Raw15",
                      "fields": [
                        {
                          "name": null,
                          "type": 167,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Raw16",
                      "fields": [
                        {
                          "name": null,
                          "type": 168,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Raw17",
                      "fields": [
                        {
                          "name": null,
                          "type": 169,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Raw18",
                      "fields": [
                        {
                          "name": null,
                          "type": 170,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Raw19",
                      "fields": [
                        {
                          "name": null,
                          "type": 171,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Raw20",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Raw21",
                      "fields": [
                        {
                          "name": null,
                          "type": 172,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Raw22",
                      "fields": [
                        {
                          "name": null,
                          "type": 173,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Raw23",
                      "fields": [
                        {
                          "name": null,
                          "type": 174,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Raw24",
                      "fields": [
                        {
                          "name": null,
                          "type": 175,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Raw25",
                      "fields": [
                        {
                          "name": null,
                          "type": 176,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Raw26",
                      "fields": [
                        {
                          "name": null,
                          "type": 177,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Raw27",
                      "fields": [
                        {
                          "name": null,
                          "type": 178,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Raw28",
                      "fields": [
                        {
                          "name": null,
                          "type": 179,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Raw29",
                      "fields": [
                        {
                          "name": null,
                          "type": 180,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Raw30",
                      "fields": [
                        {
                          "name": null,
                          "type": 181,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Raw31",
                      "fields": [
                        {
                          "name": null,
                          "type": 182,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Raw32",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "BlakeTwo256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Sha256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Keccak256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "ShaThree256",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 154,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 0,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 155,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 1,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 156,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 2,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 157,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 3,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 158,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 5,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 159,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 6,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 160,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 7,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 161,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 9,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 162,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 10,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 163,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 11,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 164,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 165,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 13,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 166,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 14,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 167,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 15,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 168,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 169,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 17,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 170,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 18,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 171,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 19,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 172,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 21,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 173,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 22,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 174,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 23,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 175,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 24,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 176,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 25,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 177,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 26,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 178,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 27,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 179,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 28,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 180,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 29,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 181,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 30,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 182,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 31,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 183,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 152
                }
              },
              "docs": []
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 139
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 139,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 185,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 186
                }
              },
              "docs": []
            }
          },
          {
            "id": 186,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  153
                ]
              },
              "docs": []
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "BitFlags"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 188
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 8,
                      "typeName": "IdentityField",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "IdentityField"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Display",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Legal",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Web",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Riot",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Email",
                      "fields": [],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "PgpFingerprint",
                      "fields": [],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Image",
                      "fields": [],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Twitter",
                      "fields": [],
                      "index": 128,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Judgement"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "FeePaid",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Reasonable",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "KnownGood",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "OutOfDate",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "LowQuality",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Erroneous",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "as_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "call",
                          "type": 145,
                          "typeName": "Box<<T as Config>::Call>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Send a call through a recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you want to make a call on-behalf-of.",
                        "- `call`: The call you want to make with the recovered account."
                      ]
                    },
                    {
                      "name": "set_recovered",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow ROOT to bypass the recovery process and set an a rescuer account",
                        "for a lost account directly.",
                        "",
                        "The dispatch origin for this call must be _ROOT_.",
                        "",
                        "Parameters:",
                        "- `lost`: The \"lost account\" to be recovered.",
                        "- `rescuer`: The \"rescuer account\" which can call as the lost account."
                      ]
                    },
                    {
                      "name": "create_recovery",
                      "fields": [
                        {
                          "name": "friends",
                          "type": 53,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "threshold",
                          "type": 101,
                          "typeName": "u16",
                          "docs": []
                        },
                        {
                          "name": "delay_period",
                          "type": 4,
                          "typeName": "T::BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Create a recovery configuration for your account. This makes your account recoverable.",
                        "",
                        "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                        "will be reserved for storing the recovery configuration. This deposit is returned",
                        "in full when the user calls `remove_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                        "  ordered and contain no duplicate values.",
                        "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                        "  account can be recovered. Should be less than or equal to the length of the list of",
                        "  friends.",
                        "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                        "  needs to pass before the account can be recovered."
                      ]
                    },
                    {
                      "name": "initiate_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Initiate the process for recovering a recoverable account.",
                        "",
                        "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                        "recovery process. This deposit will always be repatriated to the account",
                        "trying to be recovered. See `close_recovery`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to recover. This account needs to be",
                        "  recoverable (i.e. have a recovery configuration)."
                      ]
                    },
                    {
                      "name": "vouch_recovery",
                      "fields": [
                        {
                          "name": "lost",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                        "process for that account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                        "for the recoverable account.",
                        "",
                        "Parameters:",
                        "- `lost`: The lost account that you want to recover.",
                        "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                        "",
                        "The combination of these two parameters must point to an active recovery",
                        "process."
                      ]
                    },
                    {
                      "name": "claim_recovery",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Allow a successful rescuer to claim their recovered account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                        "who has successfully completed the account recovery process: collected",
                        "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                        "",
                        "Parameters:",
                        "- `account`: The lost account that you want to claim has been successfully recovered by",
                        "  you."
                      ]
                    },
                    {
                      "name": "close_recovery",
                      "fields": [
                        {
                          "name": "rescuer",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "As the controller of a recoverable account, close an active recovery",
                        "process for your account.",
                        "",
                        "Payment: By calling this function, the recoverable account will receive",
                        "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account with an active recovery process for it.",
                        "",
                        "Parameters:",
                        "- `rescuer`: The account trying to rescue this recoverable account."
                      ]
                    },
                    {
                      "name": "remove_recovery",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Remove the recovery process for your account. Recovered accounts are still accessible.",
                        "",
                        "NOTE: The user must make sure to call `close_recovery` on all active",
                        "recovery attempts before calling this function else it will fail.",
                        "",
                        "Payment: By calling this function the recoverable account will unreserve",
                        "their recovery configuration deposit.",
                        "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                        "",
                        "The dispatch origin for this call must be _Signed_ and must be a",
                        "recoverable account (i.e. has a recovery configuration)."
                      ]
                    },
                    {
                      "name": "cancel_recovered",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Cancel the ability to use `as_recovered` for `account`.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and registered to",
                        "be able to make calls on behalf of the recovered account.",
                        "",
                        "Parameters:",
                        "- `account`: The recovered account you are able to call on-behalf-of."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Assign an previously unassigned index.",
                        "",
                        "Payment: `Deposit` is reserved from the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be claimed. This must not be in use.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Assign an index already owned by the sender to another account. The balance reservation",
                        "is effectively transferred to the new account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "- `index`: the index to be re-assigned. This must be owned by the sender.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One transfer operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (recipient)",
                        "   - Writes: Indices Accounts, System Account (recipient)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "free",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Free up an index owned by the sender.",
                        "",
                        "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                        "",
                        "- `index`: the index to be freed. This must be owned by the sender.",
                        "",
                        "Emits `IndexFreed` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- One reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        },
                        {
                          "name": "freeze",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Force an index to an account. This doesn't require a deposit. If the index is already",
                        "held, then any deposit is reimbursed to its current owner.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `index`: the index to be (re-)assigned.",
                        "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                        "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                        "",
                        "Emits `IndexAssigned` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one reserve operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight:",
                        "   - Reads: Indices Accounts, System Account (original owner)",
                        "   - Writes: Indices Accounts, System Account (original owner)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "T::AccountIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Freeze an index so it will always point to the sender account. This consumes the",
                        "deposit.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                        "non-frozen account `index`.",
                        "",
                        "- `index`: the index to be frozen in place.",
                        "",
                        "Emits `IndexFrozen` if successful.",
                        "",
                        "# <weight>",
                        "- `O(1)`.",
                        "- One storage mutation (codec `O(1)`).",
                        "- Up to one slash operation.",
                        "- One event.",
                        "-------------------",
                        "- DB Weight: 1 Read/Write (Accounts)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_spend",
                      "fields": [
                        {
                          "name": "value",
                          "type": 140,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Put forward a suggestion for spending. A deposit proportional to the value",
                        "is reserved and slashed if the proposal is rejected. It is returned once the",
                        "proposal is awarded.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `ProposalCount`, `origin account`",
                        "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "reject_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 82,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Reject a proposed spend. The original deposit will be slashed.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1)",
                        "- DbReads: `Proposals`, `rejected proposer account`",
                        "- DbWrites: `Proposals`, `rejected proposer account`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "approve_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 82,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- Complexity: O(1).",
                        "- DbReads: `Proposals`, `Approvals`",
                        "- DbWrite: `Approvals`",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "spend",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Propose and approve a spend of treasury funds.",
                        "",
                        "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
                        "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                        "- `beneficiary`: The destination account for the transfer.",
                        "",
                        "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                        "beneficiary."
                      ]
                    },
                    {
                      "name": "remove_approval",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 82,
                          "typeName": "ProposalIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Force a previously approved proposal to be removed from the approval queue.",
                        "The original deposit will no longer be returned.",
                        "",
                        "May only be called from `T::RejectOrigin`.",
                        "- `proposal_id`: The index of a proposal",
                        "",
                        "# <weight>",
                        "- Complexity: O(A) where `A` is the number of approvals",
                        "- Db reads and writes: `Approvals`",
                        "# </weight>",
                        "",
                        "Errors:",
                        "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
                        "i.e., the proposal has not been approved. This could also mean the proposal does not",
                        "exist altogether, thus there is no way it would have been approved in the first place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_members",
                      "fields": [
                        {
                          "name": "new_members",
                          "type": 53,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "prime",
                          "type": 38,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        },
                        {
                          "name": "old_count",
                          "type": 4,
                          "typeName": "MemberCount",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the collective's membership.",
                        "",
                        "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                        "- `prime`: The prime member whose vote sets the default.",
                        "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                        "  weight estimation.",
                        "",
                        "Requires root origin.",
                        "",
                        "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                        "      the weight estimations rely on it to estimate dispatchable weight.",
                        "",
                        "# WARNING:",
                        "",
                        "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                        "implementation of the trait [`ChangeMembers`].",
                        "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                        "with other logic managing the member set.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(MP + N)` where:",
                        "  - `M` old-members-count (code- and governance-bounded)",
                        "  - `N` new-members-count (code- and governance-bounded)",
                        "  - `P` proposals-count (code-bounded)",
                        "- DB:",
                        "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                        "    members",
                        "  - 1 storage read (codec `O(P)`) for reading the proposals",
                        "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                        "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "execute",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 145,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 82,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Dispatch a proposal from a member using the `Member` origin.",
                        "",
                        "Origin must be a member of the collective.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                        "  `proposal`",
                        "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 82,
                          "typeName": "MemberCount",
                          "docs": []
                        },
                        {
                          "name": "proposal",
                          "type": 145,
                          "typeName": "Box<<T as Config<I>>::Proposal>",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 82,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Add a new proposal to either be voted on or executed directly.",
                        "",
                        "Requires the sender to be member.",
                        "",
                        "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                        "or put up for voting.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - branching is influenced by `threshold` where:",
                        "    - `P1` is proposal execution complexity (`threshold < 2`)",
                        "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                        "- DB:",
                        "  - 1 storage read `is_member` (codec `O(M)`)",
                        "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                        "  - DB accesses influenced by `threshold`:",
                        "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                        "    - OR proposal insertion (`threshold <= 2`)",
                        "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                        "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                        "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                        "      - 1 storage write `Voting` (codec `O(M)`)",
                        "  - 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "proposal",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 82,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Add an aye or nay vote for the sender to the given proposal.",
                        "",
                        "Requires the sender to be a member.",
                        "",
                        "Transaction fees will be waived if the member is voting on any particular proposal",
                        "for the first time and the call is successful. Subsequent vote changes will charge a",
                        "fee.",
                        "# <weight>",
                        "## Weight",
                        "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                        "- DB:",
                        "  - 1 storage read `Members` (codec `O(M)`)",
                        "  - 1 storage mutation `Voting` (codec `O(M)`)",
                        "- 1 event",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        },
                        {
                          "name": "index",
                          "type": 82,
                          "typeName": "ProposalIndex",
                          "docs": []
                        },
                        {
                          "name": "proposal_weight_bound",
                          "type": 105,
                          "typeName": "Weight",
                          "docs": []
                        },
                        {
                          "name": "length_bound",
                          "type": 82,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Close a vote that is either approved, disapproved or whose voting period has ended.",
                        "",
                        "May be called by any signed account in order to finish voting and close the proposal.",
                        "",
                        "If called before the end of the voting period it will only close the vote if it is",
                        "has enough votes to be approved or disapproved.",
                        "",
                        "If called after the end of the voting period abstentions are counted as rejections",
                        "unless there is a prime member set and the prime member cast an approval.",
                        "",
                        "If the close operation completes successfully with disapproval, the transaction fee will",
                        "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                        "",
                        "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                        "proposal.",
                        "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                        "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                        "",
                        "# <weight>",
                        "## Weight",
                        "- `O(B + M + P1 + P2)` where:",
                        "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                        "  - `M` is members-count (code- and governance-bounded)",
                        "  - `P1` is the complexity of `proposal` preimage.",
                        "  - `P2` is proposal-count (code-bounded)",
                        "- DB:",
                        " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                        " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                        "   `O(P2)`)",
                        " - any mutations done while executing `proposal` (`P1`)",
                        "- up to 3 events",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "disapprove_proposal",
                      "fields": [
                        {
                          "name": "proposal_hash",
                          "type": 9,
                          "typeName": "T::Hash",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                        "state.",
                        "",
                        "Must be called by the Root origin.",
                        "",
                        "Parameters:",
                        "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                        "",
                        "# <weight>",
                        "Complexity: O(P) where P is the number of max proposals",
                        "DB Weight:",
                        "* Reads: Proposals",
                        "* Writes: Voting, Proposals, ProposalOf",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a member `who` to the set.",
                        "",
                        "May only be called from `T::AddOrigin`."
                      ]
                    },
                    {
                      "name": "remove_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a member `who` from the set.",
                        "",
                        "May only be called from `T::RemoveOrigin`."
                      ]
                    },
                    {
                      "name": "swap_member",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap out one member `remove` for another `add`.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "Prime membership is *not* passed from `remove` to `add`, if extant."
                      ]
                    },
                    {
                      "name": "reset_members",
                      "fields": [
                        {
                          "name": "members",
                          "type": 53,
                          "typeName": "Vec<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Change the membership to a new set, disregarding the existing membership. Be nice and",
                        "pass `members` pre-sorted.",
                        "",
                        "May only be called from `T::ResetOrigin`."
                      ]
                    },
                    {
                      "name": "change_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Swap out the sending member for some other key `new`.",
                        "",
                        "May only be called from `Signed` origin of a current member.",
                        "",
                        "Prime membership is passed from the origin account to `new`, if extant."
                      ]
                    },
                    {
                      "name": "set_prime",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the prime member. Must be a current member.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    },
                    {
                      "name": "clear_prime",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Remove the prime member if it exists.",
                        "",
                        "May only be called from `T::PrimeOrigin`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "pallet_node_authorization",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_well_known_node",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Add a node to the set of well known nodes. If the node is already claimed, the owner",
                        "will be updated and keep the existing additional connection unchanged.",
                        "",
                        "May only be called from `T::AddOrigin`.",
                        "",
                        "- `node`: identifier of the node."
                      ]
                    },
                    {
                      "name": "remove_well_known_node",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Remove a node from the set of well known nodes. The ownership and additional",
                        "connections of the node will also be removed.",
                        "",
                        "May only be called from `T::RemoveOrigin`.",
                        "",
                        "- `node`: identifier of the node."
                      ]
                    },
                    {
                      "name": "swap_well_known_node",
                      "fields": [
                        {
                          "name": "remove",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "add",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Swap a well known node to another. Both the ownership and additional connections",
                        "stay untouched.",
                        "",
                        "May only be called from `T::SwapOrigin`.",
                        "",
                        "- `remove`: the node which will be moved out from the list.",
                        "- `add`: the node which will be put in the list."
                      ]
                    },
                    {
                      "name": "reset_well_known_nodes",
                      "fields": [
                        {
                          "name": "nodes",
                          "type": 49,
                          "typeName": "Vec<(PeerId, T::AccountId)>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Reset all the well known nodes. This will not remove the ownership and additional",
                        "connections for the removed nodes. The node owner can perform further cleaning if",
                        "they decide to leave the network.",
                        "",
                        "May only be called from `T::ResetOrigin`.",
                        "",
                        "- `nodes`: the new nodes for the allow list."
                      ]
                    },
                    {
                      "name": "claim_node",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A given node can be claimed by anyone. The owner should be the first to know its",
                        "PeerId, so claim it right away!",
                        "",
                        "- `node`: identifier of the node."
                      ]
                    },
                    {
                      "name": "remove_claim",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A claim can be removed by its owner and get back the reservation. The additional",
                        "connections are also removed. You can't remove a claim on well known nodes, as it",
                        "needs to reach consensus among the network participants.",
                        "",
                        "- `node`: identifier of the node."
                      ]
                    },
                    {
                      "name": "transfer_node",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A node can be transferred to a new owner.",
                        "",
                        "- `node`: identifier of the node.",
                        "- `owner`: new owner of the node."
                      ]
                    },
                    {
                      "name": "add_connections",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "connections",
                          "type": 51,
                          "typeName": "Vec<PeerId>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Add additional connections to a given node.",
                        "",
                        "- `node`: identifier of the node.",
                        "- `connections`: additonal nodes from which the connections are allowed."
                      ]
                    },
                    {
                      "name": "remove_connections",
                      "fields": [
                        {
                          "name": "node",
                          "type": 48,
                          "typeName": "PeerId",
                          "docs": []
                        },
                        {
                          "name": "connections",
                          "type": 51,
                          "typeName": "Vec<PeerId>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Remove additional connections of a given node.",
                        "",
                        "- `node`: identifier of the node.",
                        "- `connections`: additonal nodes from which the connections are not allowed anymore."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "bid",
                      "fields": [
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A user outside of the society can make a bid for entry.",
                        "",
                        "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                        "when the bid becomes a member, or if the bid calls `unbid`.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Parameters:",
                        "- `value`: A one time payment the bid would like to receive when joining the society.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                        "- Storage Reads:",
                        "\t- One storage read to check for suspended candidate. O(1)",
                        "\t- One storage read to check for suspended member. O(1)",
                        "\t- One storage read to retrieve all current bids. O(B)",
                        "\t- One storage read to retrieve all current candidates. O(C)",
                        "\t- One storage read to retrieve all members. O(M)",
                        "- Storage Writes:",
                        "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                        "   w/ read)",
                        "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                        "- Notable Computation:",
                        "\t- O(B + C + log M) search to check user is not already a part of society.",
                        "\t- O(log B) search to insert the new bid sorted.",
                        "- External Pallet Operations:",
                        "\t- One balance reserve operation. O(X)",
                        "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                        "- Events:",
                        "\t- One event for new bid.",
                        "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                        "",
                        "Total Complexity: O(M + B + C + logM + logB + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unbid",
                      "fields": [
                        {
                          "name": "pos",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "A bidder can remove their bid for entry into society.",
                        "By doing so, they will have their candidate deposit returned or",
                        "they will unvouch their voucher.",
                        "",
                        "Payment: The bid deposit is unreserved if the user made a bid.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a bidder.",
                        "",
                        "Parameters:",
                        "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), X (balance unreserve)",
                        "- One storage read and write to retrieve and update the bids. O(B)",
                        "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(B + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vouch",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "As a member, vouch for someone to join society by placing a bid on their behalf.",
                        "",
                        "There is no deposit required to vouch for a new bid, but a member can only vouch for",
                        "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                        "the suspension judgement origin, the member will be banned from vouching again.",
                        "",
                        "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                        "be paid as a portion of the reward the member will receive for joining the society.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `who`: The user who you would like to vouch for.",
                        "- `value`: The total reward to be paid between you and the candidate if they become",
                        "a member in the society.",
                        "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                        "the society. Tips larger than `value` will be saturated upon payout.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), C (len of candidates), M (len of members)",
                        "- Storage Reads:",
                        "\t- One storage read to retrieve all members. O(M)",
                        "\t- One storage read to check member is not already vouching. O(1)",
                        "\t- One storage read to check for suspended candidate. O(1)",
                        "\t- One storage read to check for suspended member. O(1)",
                        "\t- One storage read to retrieve all current bids. O(B)",
                        "\t- One storage read to retrieve all current candidates. O(C)",
                        "- Storage Writes:",
                        "\t- One storage write to insert vouching status to the member. O(1)",
                        "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                        "   w/ read)",
                        "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                        "- Notable Computation:",
                        "\t- O(log M) search to check sender is a member.",
                        "\t- O(B + C + log M) search to check user is not already a part of society.",
                        "\t- O(log B) search to insert the new bid sorted.",
                        "- External Pallet Operations:",
                        "\t- One balance reserve operation. O(X)",
                        "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                        "- Events:",
                        "\t- One event for vouch.",
                        "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                        "",
                        "Total Complexity: O(M + B + C + logM + logB + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unvouch",
                      "fields": [
                        {
                          "name": "pos",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "As a vouching member, unvouch a bid. This only works while vouched user is",
                        "only a bidder (and not a candidate).",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a vouching member.",
                        "",
                        "Parameters:",
                        "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids)",
                        "- One storage read O(1) to check the signer is a vouching member.",
                        "- One storage mutate to retrieve and update the bids. O(B)",
                        "- One vouching storage removal. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(B)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "candidate",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "approve",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "As a member, vote on a candidate.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `candidate`: The candidate that the member would like to bid on.",
                        "- `approve`: A boolean which says if the candidate should be approved (`true`) or",
                        "  rejected (`false`).",
                        "",
                        "# <weight>",
                        "Key: C (len of candidates), M (len of members)",
                        "- One storage read O(M) and O(log M) search to check user is a member.",
                        "- One account lookup.",
                        "- One storage read O(C) and O(C) search to check that user is a candidate.",
                        "- One storage write to add vote to votes. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(M + logM + C)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "defender_vote",
                      "fields": [
                        {
                          "name": "approve",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "As a member, vote on the defender.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member.",
                        "",
                        "Parameters:",
                        "- `approve`: A boolean which says if the candidate should be",
                        "approved (`true`) or rejected (`false`).",
                        "",
                        "# <weight>",
                        "- Key: M (len of members)",
                        "- One storage read O(M) and O(log M) search to check user is a member.",
                        "- One storage write to add vote to votes. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(M + logM)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "payout",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Transfer the first matured payout for the sender and remove it from the records.",
                        "",
                        "NOTE: This extrinsic needs to be called multiple times to claim multiple matured",
                        "payouts.",
                        "",
                        "Payment: The member will receive a payment equal to their first matured",
                        "payout to their free balance.",
                        "",
                        "The dispatch origin for this call must be _Signed_ and a member with",
                        "payouts remaining.",
                        "",
                        "# <weight>",
                        "Key: M (len of members), P (number of payouts for a particular member)",
                        "- One storage read O(M) and O(log M) search to check signer is a member.",
                        "- One storage read O(P) to get all payouts for a member.",
                        "- One storage read O(1) to get the current block number.",
                        "- One currency transfer call. O(X)",
                        "- One storage write or removal to update the member's payouts. O(P)",
                        "",
                        "Total Complexity: O(M + logM + P + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "found",
                      "fields": [
                        {
                          "name": "founder",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "max_members",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "rules",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Found the society.",
                        "",
                        "This is done as a discrete action in order to allow for the",
                        "pallet to be included into a running chain and can only be done once.",
                        "",
                        "The dispatch origin for this call must be from the _FounderSetOrigin_.",
                        "",
                        "Parameters:",
                        "- `founder` - The first member and head of the newly founded society.",
                        "- `max_members` - The initial max number of members for the society.",
                        "- `rules` - The rules of this society concerning membership.",
                        "",
                        "# <weight>",
                        "- Two storage mutates to set `Head` and `Founder`. O(1)",
                        "- One storage write to add the first member to society. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unfound",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Annul the founding of the society.",
                        "",
                        "The dispatch origin for this call must be Signed, and the signing account must be both",
                        "the `Founder` and the `Head`. This implies that it may only be done when there is one",
                        "member.",
                        "",
                        "# <weight>",
                        "- Two storage reads O(1).",
                        "- Four storage removals O(1).",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "judge_suspended_member",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "forgive",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow suspension judgement origin to make judgement on a suspended member.",
                        "",
                        "If a suspended member is forgiven, we simply add them back as a member, not affecting",
                        "any of the existing storage items for that member.",
                        "",
                        "If a suspended member is rejected, remove all associated storage items, including",
                        "their payouts, and remove any vouched bids they currently have.",
                        "",
                        "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                        "",
                        "Parameters:",
                        "- `who` - The suspended member to be judged.",
                        "- `forgive` - A boolean representing whether the suspension judgement origin forgives",
                        "  (`true`) or rejects (`false`) a suspended member.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), M (len of members)",
                        "- One storage read to check `who` is a suspended member. O(1)",
                        "- Up to one storage write O(M) with O(log M) binary search to add a member back to",
                        "  society.",
                        "- Up to 3 storage removals O(1) to clean up a removed member.",
                        "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                        "- Up to one additional event if unvouch takes place.",
                        "- One storage removal. O(1)",
                        "- One event for the judgement.",
                        "",
                        "Total Complexity: O(M + logM + B)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "judge_suspended_candidate",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "judgement",
                          "type": 197,
                          "typeName": "Judgement",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Allow suspended judgement origin to make judgement on a suspended candidate.",
                        "",
                        "If the judgement is `Approve`, we add them to society as a member with the appropriate",
                        "payment for joining society.",
                        "",
                        "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                        "to the society treasury, or we ban the voucher from vouching again.",
                        "",
                        "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                        "through the induction process again.",
                        "",
                        "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                        "",
                        "Parameters:",
                        "- `who` - The suspended candidate to be judged.",
                        "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
                        "",
                        "# <weight>",
                        "Key: B (len of bids), M (len of members), X (balance action)",
                        "- One storage read to check `who` is a suspended candidate.",
                        "- One storage removal of the suspended candidate.",
                        "- Approve Logic",
                        "\t- One storage read to get the available pot to pay users with. O(1)",
                        "\t- One storage write to update the available pot. O(1)",
                        "\t- One storage read to get the current block number. O(1)",
                        "\t- One storage read to get all members. O(M)",
                        "\t- Up to one unreserve currency action.",
                        "\t- Up to two new storage writes to payouts.",
                        "\t- Up to one storage write with O(log M) binary search to add a member to society.",
                        "- Reject Logic",
                        "\t- Up to one repatriate reserved currency action. O(X)",
                        "\t- Up to one storage write to ban the vouching member from vouching again.",
                        "- Rebid Logic",
                        "\t- Storage mutate with O(log B) binary search to place the user back into bids.",
                        "- Up to one additional event if unvouch takes place.",
                        "- One storage removal.",
                        "- One event for the judgement.",
                        "",
                        "Total Complexity: O(M + logM + B + X)",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "set_max_members",
                      "fields": [
                        {
                          "name": "max",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allows root origin to change the maximum number of members in society.",
                        "Max membership count must be greater than 1.",
                        "",
                        "The dispatch origin for this call must be from _ROOT_.",
                        "",
                        "Parameters:",
                        "- `max` - The maximum number of members for the society.",
                        "",
                        "# <weight>",
                        "- One storage write to update the max. O(1)",
                        "- One event.",
                        "",
                        "Total Complexity: O(1)",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "pallet_society",
                "Judgement"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Rebid",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reject",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Approve",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "propose_bounty",
                      "fields": [
                        {
                          "name": "value",
                          "type": 140,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Propose a new bounty.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                        "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                        "or slashed when rejected.",
                        "",
                        "- `curator`: The curator account whom will manage this bounty.",
                        "- `fee`: The curator fee.",
                        "- `value`: The total payment amount of this bounty, curator fee included.",
                        "- `description`: The description of this bounty."
                      ]
                    },
                    {
                      "name": "approve_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                        "and the original deposit will be returned.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "propose_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "curator",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "fee",
                          "type": 140,
                          "typeName": "BalanceOf<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Assign a curator to a funded bounty.",
                        "",
                        "May only be called from `T::ApproveOrigin`.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "unassign_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Unassign curator from a bounty.",
                        "",
                        "This function can only be called by the `RejectOrigin` a signed origin.",
                        "",
                        "If this function is called by the `RejectOrigin`, we assume that the curator is",
                        "malicious or inactive. As a result, we will slash the curator when possible.",
                        "",
                        "If the origin is the curator, we take this as a sign they are unable to do their job and",
                        "they willingly give up. We could slash them, but for now we allow them to recover their",
                        "deposit and exit without issue. (We may want to change this if it is abused.)",
                        "",
                        "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                        "anyone in the community to call out that a curator is not doing their due diligence, and",
                        "we should pick a new curator. In this case the curator should also be slashed.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "accept_curator",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept the curator role for a bounty.",
                        "A deposit will be reserved from curator and refund upon successful payout.",
                        "",
                        "May only be called from the curator.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "award_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                        "after a delay.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to award.",
                        "- `beneficiary`: The beneficiary account whom will receive the payout.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "claim_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Claim the payout from an awarded bounty after payout delay.",
                        "",
                        "The dispatch origin for this call must be the beneficiary of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to claim.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "close_bounty",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                        "the curator deposit will be unreserved if possible.",
                        "",
                        "Only `T::RejectOrigin` is able to cancel a bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to cancel.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    },
                    {
                      "name": "extend_bounty_expiry",
                      "fields": [
                        {
                          "name": "bounty_id",
                          "type": 82,
                          "typeName": "BountyIndex",
                          "docs": []
                        },
                        {
                          "name": "remark",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Extend the expiry time of an active bounty.",
                        "",
                        "The dispatch origin for this call must be the curator of this bounty.",
                        "",
                        "- `bounty_id`: Bounty ID to extend.",
                        "- `remark`: additional information.",
                        "",
                        "# <weight>",
                        "- O(1).",
                        "# </weight>"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new collection of non-fungible items from a public origin.",
                        "",
                        "This new collection has no items initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "`ItemDeposit` funds of sender are reserved.",
                        "",
                        "Parameters:",
                        "- `collection`: The identifier of the new collection. This must not be currently in use.",
                        "- `admin`: The admin of this collection. The admin is the initial address of each",
                        "member of the collection's admin team.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "free_holding",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new collection of non-fungible items from a privileged origin.",
                        "",
                        "This new collection has no items initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `collection`: The identifier of the new item. This must not be currently in use.",
                        "- `owner`: The owner of this collection of items. The owner has full superuser",
                        "  permissions",
                        "over this item, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": 200,
                          "typeName": "DestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a collection of fungible items.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                        "owner of the `collection`.",
                        "",
                        "- `collection`: The identifier of the collection to be destroyed.",
                        "- `witness`: Information on the items minted in the collection. This must be",
                        "correct.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "Weight: `O(n + m)` where:",
                        "- `n = witness.items`",
                        "- `m = witness.item_metadatas`",
                        "- `a = witness.attributes`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint an item of a particular collection.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be minted.",
                        "- `item`: The item value of the item to be minted.",
                        "- `beneficiary`: The initial owner of the minted item.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "check_owner",
                          "type": 201,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Destroy a single item.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be burned.",
                        "- `item`: The item of the item to be burned.",
                        "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
                        "  item is owned by this value.",
                        "",
                        "Emits `Burned` with the actual amount burned.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: `check_owner.is_some()`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move an item from the sender account to another.",
                        "",
                        "Origin must be Signed and the signing account must be either:",
                        "- the Admin of the `collection`;",
                        "- the Owner of the `item`;",
                        "- the approved delegate for the `item` (in this case, the approval is reset).",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item to be transferred.",
                        "- `item`: The item of the item to be transferred.",
                        "- `dest`: The account to receive ownership of the item.",
                        "",
                        "Emits `Transferred`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "redeposit",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "items",
                          "type": 57,
                          "typeName": "Vec<T::ItemId>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Reevaluate the deposits on some items.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection to be frozen.",
                        "- `items`: The items of the collection whose deposits will be reevaluated.",
                        "",
                        "NOTE: This exists as a best-effort function. Any items which are unknown or",
                        "in the case that the owner account does not have reservable funds to pay for a",
                        "deposit increase are ignored. Generally the owner isn't going to call this on items",
                        "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                        "so it's of little consequence.",
                        "",
                        "It will still return an error in the case that the collection is unknown of the signer",
                        "is not permitted to call it.",
                        "",
                        "Weight: `O(items.len())`"
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Disallow further unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be frozen.",
                        "- `item`: The item of the item to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Re-allow unprivileged transfer of an item.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection of the item to be thawed.",
                        "- `item`: The item of the item to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Disallow further unprivileged transfers for a whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                        "",
                        "- `collection`: The collection to be frozen.",
                        "",
                        "Emits `CollectionFrozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_collection",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Re-allow unprivileged transfers for a whole collection.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the `collection`.",
                        "",
                        "- `collection`: The collection to be thawed.",
                        "",
                        "Emits `CollectionThawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Change the Owner of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose owner should be changed.",
                        "- `owner`: The new Owner of this collection. They must have called",
                        "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of a collection.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the `collection`.",
                        "",
                        "- `collection`: The collection whose team should be changed.",
                        "- `issuer`: The new Issuer of this collection.",
                        "- `admin`: The new Admin of this collection.",
                        "- `freezer`: The new Freezer of this collection.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Approve an item to be transferred by a delegated third-party account.",
                        "",
                        "Origin must be Signed and must be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item to be approved for delegated transfer.",
                        "- `item`: The item of the item to be approved for delegated transfer.",
                        "- `delegate`: The account to delegate permission to transfer the item.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "maybe_check_delegate",
                          "type": 201,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Cancel the prior approval for the transfer of an item by a delegate.",
                        "",
                        "Origin must be either:",
                        "- the `Force` origin;",
                        "- `Signed` with the signer being the Admin of the `collection`;",
                        "- `Signed` with the signer being the Owner of the `item`;",
                        "",
                        "Arguments:",
                        "- `collection`: The collection of the item of whose approval will be cancelled.",
                        "- `item`: The item of the item of whose approval will be cancelled.",
                        "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
                        "  which permission of transfer is delegated.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_item_status",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "free_holding",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Alter the attributes of a given item.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `collection`: The identifier of the item.",
                        "- `owner`: The new Owner of this item.",
                        "- `issuer`: The new Issuer of this item.",
                        "- `admin`: The new Admin of this item.",
                        "- `freezer`: The new Freezer of this item.",
                        "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
                        "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `ItemStatusChanged` with the identity of the item.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "maybe_item",
                          "type": 58,
                          "typeName": "Option<T::ItemId>",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 59,
                          "typeName": "BoundedVec<u8, T::KeyLimit>",
                          "docs": []
                        },
                        {
                          "name": "value",
                          "type": 60,
                          "typeName": "BoundedVec<u8, T::ValueLimit>",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Set an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `maybe_item`: The identifier of the item whose metadata to set.",
                        "- `key`: The key of the attribute.",
                        "- `value`: The value to which to set the attribute.",
                        "",
                        "Emits `AttributeSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_attribute",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "maybe_item",
                          "type": 58,
                          "typeName": "Option<T::ItemId>",
                          "docs": []
                        },
                        {
                          "name": "key",
                          "type": 59,
                          "typeName": "BoundedVec<u8, T::KeyLimit>",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear an attribute for a collection or item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `maybe_item`: The identifier of the item whose metadata to clear.",
                        "- `key`: The key of the attribute.",
                        "",
                        "Emits `AttributeCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 56,
                          "typeName": "BoundedVec<u8, T::StringLimit>",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Set the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`collection`.",
                        "",
                        "If the origin is Signed, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to set.",
                        "- `item`: The identifier of the item whose metadata to set.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Clear the metadata for an item.",
                        "",
                        "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                        "`item`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose item's metadata to clear.",
                        "- `item`: The identifier of the item whose metadata to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "data",
                          "type": 56,
                          "typeName": "BoundedVec<u8, T::StringLimit>",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Set the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                        "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `collection`: The identifier of the item whose metadata to update.",
                        "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                        "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                        "",
                        "Emits `CollectionMetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_collection_metadata",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Clear the metadata for a collection.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "Any deposit is freed for the collection's owner.",
                        "",
                        "- `collection`: The identifier of the collection whose metadata to clear.",
                        "",
                        "Emits `CollectionMetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_accept_ownership",
                      "fields": [
                        {
                          "name": "maybe_collection",
                          "type": 58,
                          "typeName": "Option<T::CollectionId>",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Set (or reset) the acceptance of ownership for a particular account.",
                        "",
                        "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                        "provider reference.",
                        "",
                        "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                        "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                        "  ownership transferal.",
                        "",
                        "Emits `OwnershipAcceptanceChanged`."
                      ]
                    },
                    {
                      "name": "set_collection_max_supply",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "max_supply",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Set the maximum amount of items a collection could have.",
                        "",
                        "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                        "the `collection`.",
                        "",
                        "Note: This function can only succeed once per collection.",
                        "",
                        "- `collection`: The identifier of the collection to change.",
                        "- `max_supply`: The maximum amount of items a collection could have.",
                        "",
                        "Emits `CollectionMaxSupplySet` event when successful."
                      ]
                    },
                    {
                      "name": "set_price",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": 202,
                          "typeName": "Option<ItemPrice<T, I>>",
                          "docs": []
                        },
                        {
                          "name": "whitelisted_buyer",
                          "type": 201,
                          "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Set (or reset) the price for an item.",
                        "",
                        "Origin must be Signed and must be the owner of the asset `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item to set the price for.",
                        "- `price`: The price for the item. Pass `None`, to reset the price.",
                        "- `buyer`: Restricts the buy operation to a specific account.",
                        "",
                        "Emits `ItemPriceSet` on success if the price is not `None`.",
                        "Emits `ItemPriceRemoved` on success if the price is `None`."
                      ]
                    },
                    {
                      "name": "buy_item",
                      "fields": [
                        {
                          "name": "collection",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "bid_price",
                          "type": 6,
                          "typeName": "ItemPrice<T, I>",
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": [
                        "Allows to buy an item if it's up for sale.",
                        "",
                        "Origin must be Signed and must not be the owner of the `item`.",
                        "",
                        "- `collection`: The collection of the item.",
                        "- `item`: The item the sender wants to buy.",
                        "- `bid_price`: The price the sender is willing to pay.",
                        "",
                        "Emits `ItemBought` on success."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "DestroyWitness"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "items",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "item_metadatas",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 137
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 137,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "pallet_fruniques",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initial_setup",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "create_collection",
                      "fields": [
                        {
                          "name": "metadata",
                          "type": 56,
                          "typeName": "CollectionDescription<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "# Creation of a collection",
                        "This function creates a collection and an asset class.",
                        "The collection is a unique identifier for a set of fruniques.",
                        "",
                        "## Parameters",
                        "- `origin`: The origin of the transaction.",
                        "- `metadata`: The title of the collection."
                      ]
                    },
                    {
                      "name": "instance_exists",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "instance_id",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "set_attributes",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "instance_id",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "attributes",
                          "type": 204,
                          "typeName": "Attributes<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "## Set multiple attributes to a frunique.",
                        "- `origin` must be signed by the owner of the frunique.",
                        "- `class_id` must be a valid class of the asset class.",
                        "- `instance_id` must be a valid instance of the asset class.",
                        "- `attributes` must be a list of pairs of `key` and `value`."
                      ]
                    },
                    {
                      "name": "spawn",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "CollectionId",
                          "docs": []
                        },
                        {
                          "name": "parent_info",
                          "type": 206,
                          "typeName": "Option<HierarchicalInfo>",
                          "docs": []
                        },
                        {
                          "name": "metadata",
                          "type": 56,
                          "typeName": "CollectionDescription<T>",
                          "docs": []
                        },
                        {
                          "name": "attributes",
                          "type": 208,
                          "typeName": "Option<Attributes<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "## NFT creation",
                        "### Parameters:",
                        "- `origin` must be signed by the owner of the frunique.",
                        "- `class_id` must be a valid class of the asset class.",
                        "- `parent_info` Optional value needed for the NFT division.",
                        "- `metadata` Title of the nft.",
                        "- `attributes` An array of attributes (key, value) to be added to the NFT."
                      ]
                    },
                    {
                      "name": "verify",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "CollectionId",
                          "docs": []
                        },
                        {
                          "name": "instance_id",
                          "type": 4,
                          "typeName": "ItemId",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "## Verification of the NFT",
                        "### Parameters:",
                        "- `origin` must be signed by the owner of the frunique.",
                        "- `class_id` must be a valid class of the asset class.",
                        "- `instance_id` must be a valid instance of the asset class."
                      ]
                    },
                    {
                      "name": "force_set_counter",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "instance_id",
                          "type": 58,
                          "typeName": "Option<T::ItemId>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "## Force set counter",
                        "### Parameters:",
                        "`origin` must be signed by the Root origin.",
                        "- `class_id` must be a valid class of the asset class.",
                        "- `instance_id` must be a valid instance of the asset class.",
                        "",
                        "### Considerations:",
                        "This function is only used for testing purposes. Or in case someone calls uniques pallet directly.",
                        "This function it's not expected to be used in production as it can lead to unexpected results."
                      ]
                    },
                    {
                      "name": "force_destroy_collection",
                      "fields": [
                        {
                          "name": "class_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": 200,
                          "typeName": "pallet_uniques::DestroyWitness",
                          "docs": []
                        },
                        {
                          "name": "maybe_check_owner",
                          "type": 38,
                          "typeName": "Option<T::AccountId>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "## Force destroy collection",
                        "### Parameters:",
                        "- `origin` must be signed by the Root origin.",
                        "- `class_id` must be a valid class of the asset class.",
                        "- `witness` the witness data to destroy the collection. This is used to prevent accidental destruction of the collection. The witness data is retrieved from the `class` storage.",
                        "- `maybe_check_owner` Optional value to check if the owner of the collection is the same as the signer.",
                        "### Considerations:",
                        "This function is only used for testing purposes. Or in case someone calls uniques pallet directly.",
                        "This function it's not expected to be used in production as it can lead to unexpected results."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Kill all the stored data.",
                        "",
                        "This function is used to kill ALL the stored data.",
                        "Use with caution!",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "",
                        "### Considerations:",
                        "- This function is only available to the `admin` with sudo access."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 205
                }
              },
              "docs": []
            }
          },
          {
            "id": 205,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  59,
                  60
                ]
              },
              "docs": []
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 207
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 207,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 207,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  45,
                  2
                ]
              },
              "docs": []
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 204
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 204,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initial_setup",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "create_marketplace",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "label",
                          "type": 210,
                          "typeName": "BoundedVec<u8, T::LabelMaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create a new marketplace.",
                        "",
                        "Creates a new marketplace with the given label",
                        ".",
                        "### Parameters:",
                        "- `origin`: The owner of the marketplace.",
                        "- `admin`: The admin of the marketplace.",
                        "- `label`: The name of the marketplace."
                      ]
                    },
                    {
                      "name": "apply",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "fields",
                          "type": 211,
                          "typeName": "Fields<T>",
                          "docs": []
                        },
                        {
                          "name": "custodian_fields",
                          "type": 214,
                          "typeName": "Option<CustodianFields<T>>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Apply to a marketplace.",
                        "",
                        "Applies to the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The applicant.",
                        "- `marketplace_id`: The id of the marketplace where we want to apply.",
                        "- `fields`: Confidential user documents, any files necessary for the application",
                        "- `custodian_fields`: The custodian account and their documents.",
                        "",
                        "### Considerations:",
                        "- You can add many documents, up to the maximum allowed (10).",
                        "- The custodian account is optional. You can apply to a marketplace without a",
                        "custodian account.",
                        "- All custodian fields are optional."
                      ]
                    },
                    {
                      "name": "reapply",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "fields",
                          "type": 211,
                          "typeName": "Fields<T>",
                          "docs": []
                        },
                        {
                          "name": "custodian_fields",
                          "type": 214,
                          "typeName": "Option<CustodianFields<T>>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Accept or reject a reapplyment.",
                        "",
                        "Allows the applicant for a second chance to apply to the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The reapplicant.",
                        "- `marketplace_id`: The id of the marketplace where we want to reapply.",
                        "- `fields`: Confidential user documents, any files necessary for the reapplication",
                        "- `custodian_fields`: The custodian account and their documents.",
                        "",
                        "### Considerations:",
                        "- Since this is a second chance, you can replace your previous documents, up to the maximum allowed (10).",
                        "- The custodian account is optional. You can replace the previous custodian.",
                        "- Since we know the application exists, we can check the current status of the application."
                      ]
                    },
                    {
                      "name": "enroll",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "account_or_application",
                          "type": 63,
                          "typeName": "AccountOrApplication<T>",
                          "docs": []
                        },
                        {
                          "name": "approved",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "feedback",
                          "type": 218,
                          "typeName": "BoundedVec<u8, T::MaxFeedbackLen>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Accept or reject an application.",
                        "",
                        "If the application is accepted,",
                        "the user will be added to the list of applicants.",
                        "If the application is rejected,",
                        "the user will be moved to the list of rejected applicants.",
                        "",
                        "### Parameters:",
                        "- `origin`:  The owner/admin of the marketplace.",
                        "- `marketplace_id`: The id of the marketplace where we want to enroll users.",
                        "- `account_or_application`: The account or application id to accept or reject.",
                        "- `approved`:  Whether to accept or reject the account/application.",
                        "",
                        "### Considerations:",
                        "- You can only accept or reject applications where you are the owner/admin of the marketplace.",
                        "- Ensure that your extrinsic has selected the right option account/application",
                        "because some fields changes.",
                        "- If you select `Account` you need to enter the account to be accepted.",
                        "- If you select `Application` you need to enter the `application_id` to be accepted."
                      ]
                    },
                    {
                      "name": "invite",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "fields",
                          "type": 211,
                          "typeName": "Fields<T>",
                          "docs": []
                        },
                        {
                          "name": "custodian_fields",
                          "type": 214,
                          "typeName": "Option<CustodianFields<T>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Invite a user to a marketplace.",
                        "",
                        "The admin of the marketplace can invite a user to the marketplace.",
                        "### Parameters:",
                        "- `origin`: The admin of the marketplace.",
                        "- `marketplace_id`: The id of the marketplace where we want to invite a user.",
                        "- `account`: The account to be invited.",
                        "",
                        "### Considerations:",
                        "- You can only invite users to a marketplace where you are the admin."
                      ]
                    },
                    {
                      "name": "add_authority",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "authority_type",
                          "type": 65,
                          "typeName": "MarketplaceRole",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Add an Authority type",
                        "",
                        "This extrinsic adds an authority type for the selected account",
                        "from the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `account`: The account to be removed.",
                        "- `authority_type`: The type of authority to be added.",
                        "- `marketplace_id`: The id of the marketplace where we want to add the account.",
                        "",
                        "### Considerations:",
                        "If the user has already applied to the marketplace for that particular",
                        "authority type, it will throw an error."
                      ]
                    },
                    {
                      "name": "remove_authority",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "authority_type",
                          "type": 65,
                          "typeName": "MarketplaceRole",
                          "docs": []
                        },
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Remove an Authority type",
                        "",
                        "This extrinsic removes an authority type for the selected account from the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `account`: The account to be removed.",
                        "- `authority_type`: The type of authority to be removed.",
                        "- `marketplace_id`: The id of the marketplace where we want to remove the account.",
                        "",
                        "### Considerations:",
                        "- This extrinsic doesn't remove the account from the marketplace,",
                        "it only removes the selected authority type for that account.",
                        "If the user doesn't have the selected authority type, it will throw an error."
                      ]
                    },
                    {
                      "name": "update_label_marketplace",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "new_label",
                          "type": 210,
                          "typeName": "BoundedVec<u8, T::LabelMaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Update marketplace's label.",
                        "",
                        "This extrinsic updates the label of the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `marketplace_id`: The id of the marketplace where we want to update the label.",
                        "- `label`: The new label for the selected marketplace.",
                        "",
                        "### Considerations:",
                        "- You can only update the label of the marketplace where you are the owner/admin of the marketplace.",
                        "- The label must be less than or equal to `T::LabelMaxLen",
                        "- If the selected marketplace doesn't exist, it will throw an error."
                      ]
                    },
                    {
                      "name": "remove_marketplace",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Remove a particular marketplace.",
                        "",
                        "This extrinsic removes the selected marketplace.",
                        "It removes all the applications related with the marketplace.",
                        "It removes all the authorities from the lists of the marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `marketplace_id`: The id of the marketplace to be removed.",
                        "",
                        "### Considerations:",
                        "- You can only remove the marketplace where you are the owner/admin of the marketplace.",
                        "- If the selected marketplace doesn't exist, it will throw an error."
                      ]
                    },
                    {
                      "name": "enlist_sell_offer",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "collection_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Enlist a sell order.",
                        "",
                        "This extrinsic creates a sell order in the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `marketplace_id`: The id of the marketplace where we want to create the sell order.",
                        "- `collection_id`: The id of the collection.",
                        "- `item_id`: The id of the item inside the collection.",
                        "- `price`: The price of the item.",
                        "",
                        "### Considerations:",
                        "- You can only create a sell order in the marketplace if you are the owner of the item.",
                        "- You can create only one sell order for each item per marketplace.",
                        "- If the selected marketplace doesn't exist, it will throw an error.",
                        "- If the selected collection doesn't exist, it will throw an error."
                      ]
                    },
                    {
                      "name": "take_sell_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Accepts a sell order.",
                        "",
                        "This extrisicn is called by the user who wants to buy the item.",
                        "Aaccepts a sell order in the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- 'offer_id`: The id of the sell order to be accepted.",
                        "- `marketplace_id`: The id of the marketplace where we want to accept the sell order.",
                        "",
                        "### Considerations:",
                        "- You don't need to be the owner of the item to accept the sell order.",
                        "- Once the sell order is accepted, the ownership of the item is transferred to the buyer.",
                        "- If you don't have the enough balance to accept the sell order, it will throw an error."
                      ]
                    },
                    {
                      "name": "remove_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Delete an offer.",
                        "",
                        "This extrinsic deletes an offer in the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `offer_id`: The id of the offer to be deleted.",
                        "",
                        "### Considerations:",
                        "- You can delete sell orders or buy orders.",
                        "- You can only delete an offer if you are the creator of the offer.",
                        "- Only open offers can be deleted.",
                        "- If you need to delete multiple offers for the same item, you need to",
                        " delete them one by one."
                      ]
                    },
                    {
                      "name": "enlist_buy_offer",
                      "fields": [
                        {
                          "name": "marketplace_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "collection_id",
                          "type": 4,
                          "typeName": "T::CollectionId",
                          "docs": []
                        },
                        {
                          "name": "item_id",
                          "type": 4,
                          "typeName": "T::ItemId",
                          "docs": []
                        },
                        {
                          "name": "price",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Enlist a buy order.",
                        "",
                        "This extrinsic creates a buy order in the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `marketplace_id`: The id of the marketplace where we want to create the buy order.",
                        "- `collection_id`: The id of the collection.",
                        "- `item_id`: The id of the item inside the collection.",
                        "- `price`: The price of the item.",
                        "",
                        "### Considerations:",
                        "- Any user can create a buy order in the marketplace.",
                        "- An item can receive multiple buy orders at a time.",
                        "- You need to have the enough balance to create the buy order."
                      ]
                    },
                    {
                      "name": "take_buy_offer",
                      "fields": [
                        {
                          "name": "offer_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Accepts a buy order.",
                        "",
                        "This extrinsic is called by the owner of the item who accepts the buy offer created by a marketparticipant.",
                        "Accepts a buy order in the selected marketplace.",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "- `offer_id`: The id of the buy order to be accepted.",
                        "- `marketplace_id`: The id of the marketplace where we accept the buy order.",
                        "",
                        "### Considerations:",
                        "- You need to be the owner of the item to accept a buy order.",
                        "- Owner of the item can accept only one buy order at a time.",
                        "- When an offer is accepted, all the other offers for this item are closed.",
                        "- The buyer needs to have the enough balance to accept the buy order.",
                        "- Once the buy order is accepted, the ownership of the item is transferred to the buyer."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Kill all the stored data.",
                        "",
                        "This function is used to kill ALL the stored data.",
                        "Use with caution!",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action.",
                        "",
                        "### Considerations:",
                        "- This function is only available to the `admin` with sudo access."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 212
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 213,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 212,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  71,
                  71
                ]
              },
              "docs": []
            }
          },
          {
            "id": 213,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 212
                }
              },
              "docs": []
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 215
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 215,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 215,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  216
                ]
              },
              "docs": []
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 217,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 217,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 71
                }
              },
              "docs": []
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 6,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issue a new class of fungible assets from a public origin.",
                        "",
                        "This new asset class has no assets initially and its owner is the origin.",
                        "",
                        "The origin must be Signed and the sender must have sufficient funds free.",
                        "",
                        "Funds of sender are reserved by `AssetDeposit`.",
                        "",
                        "Parameters:",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                        "member of the asset class's admin team.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `Created` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_create",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issue a new class of fungible assets from a privileged origin.",
                        "",
                        "This new asset class has no assets initially.",
                        "",
                        "The origin must conform to `ForceOrigin`.",
                        "",
                        "Unlike `create`, no funds are reserved.",
                        "",
                        "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                        "an existing asset.",
                        "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                        "over this asset, but may later change and configure the permissions using",
                        "`transfer_ownership` and `set_team`.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "",
                        "Emits `ForceCreated` event when successful.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "destroy",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "witness",
                          "type": 220,
                          "typeName": "DestroyWitness",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Destroy a class of fungible assets.",
                        "",
                        "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                        "owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                        "asset.",
                        "",
                        "Emits `Destroyed` event when successful.",
                        "",
                        "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                        "can provide accurate witness information and prevent users from manipulating state",
                        "in a way that can make it harder to destroy.",
                        "",
                        "Weight: `O(c + p + a)` where:",
                        "- `c = (witness.accounts - witness.sufficients)`",
                        "- `s = witness.sufficients`",
                        "- `a = witness.approvals`"
                      ]
                    },
                    {
                      "name": "mint",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Mint assets of a particular class.",
                        "",
                        "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount minted.",
                        "- `beneficiary`: The account to be credited with the minted assets.",
                        "- `amount`: The amount of the asset to be minted.",
                        "",
                        "Emits `Issued` event when successful.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                      ]
                    },
                    {
                      "name": "burn",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                        "",
                        "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                        "",
                        "Bails with `NoAccount` if the `who` is already dead.",
                        "",
                        "- `id`: The identifier of the asset to have some amount burned.",
                        "- `who`: The account to be debited from.",
                        "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                        "",
                        "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                        "minimum for the asset, then the amount burned is increased to take it to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                      ]
                    },
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Move some assets from the sender account to another.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "target",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Move some assets from the sender account to another, keeping the sender account alive.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `target`: The account to be credited.",
                        "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                        "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the sender balance above zero but below",
                        "the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                        "`target`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "source",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "dest",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Move some assets from one account to another.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to have some amount transferred.",
                        "- `source`: The account to be debited.",
                        "- `dest`: The account to be credited.",
                        "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                        "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                        "the case that the transfer would otherwise take the `source` balance above zero but",
                        "below the minimum balance. Must be greater than zero.",
                        "",
                        "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                        "to below the minimum for the asset, then the amount transferred is increased to take it",
                        "to zero.",
                        "",
                        "Weight: `O(1)`",
                        "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                        "`dest`."
                      ]
                    },
                    {
                      "name": "freeze",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Disallow further unprivileged transfers from an account.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "who",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Allow unprivileged transfers from an account again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `who`: The account to be unfrozen.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "freeze_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Disallow further unprivileged transfers for the asset class.",
                        "",
                        "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "",
                        "Emits `Frozen`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "thaw_asset",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Allow unprivileged transfers for the asset again.",
                        "",
                        "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be thawed.",
                        "",
                        "Emits `Thawed`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_ownership",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Change the Owner of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "",
                        "Emits `OwnerChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_team",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Change the Issuer, Admin and Freezer of an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "- `id`: The identifier of the asset to be frozen.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "",
                        "Emits `TeamChanged`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Set the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Funds of sender are reserved according to the formula:",
                        "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                        "account any already reserved funds.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                        "",
                        "Any deposit is freed for the asset owner.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_set_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "symbol",
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        },
                        {
                          "name": "decimals",
                          "type": 2,
                          "typeName": "u8",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Force the metadata for an asset to some value.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is left alone.",
                        "",
                        "- `id`: The identifier of the asset to update.",
                        "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                        "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                        "- `decimals`: The number of decimals this asset uses to represent one unit.",
                        "",
                        "Emits `MetadataSet`.",
                        "",
                        "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                      ]
                    },
                    {
                      "name": "force_clear_metadata",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Clear the metadata for an asset.",
                        "",
                        "Origin must be ForceOrigin.",
                        "",
                        "Any deposit is returned.",
                        "",
                        "- `id`: The identifier of the asset to clear.",
                        "",
                        "Emits `MetadataCleared`.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_asset_status",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "issuer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "admin",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "freezer",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "min_balance",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        },
                        {
                          "name": "is_sufficient",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "is_frozen",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Alter the attributes of a given asset.",
                        "",
                        "Origin must be `ForceOrigin`.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The new Owner of this asset.",
                        "- `issuer`: The new Issuer of this asset.",
                        "- `admin`: The new Admin of this asset.",
                        "- `freezer`: The new Freezer of this asset.",
                        "- `min_balance`: The minimum balance of this new asset that any single account must",
                        "have. If an account's balance is reduced below this, then it collapses to zero.",
                        "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                        "value to account for the state bloat associated with its balance storage. If set to",
                        "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                        "an ED in the Balances pallet or whatever else is used to control user-account state",
                        "growth).",
                        "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                        "instructions.",
                        "",
                        "Emits `AssetStatusChanged` with the identity of the asset.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "approve_transfer",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Approve an amount of asset for transfer by a delegated third-party account.",
                        "",
                        "Origin must be Signed.",
                        "",
                        "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                        "for the purpose of holding the approval. If some non-zero amount of assets is already",
                        "approved from signing account to `delegate`, then it is topped up or unreserved to",
                        "meet the right value.",
                        "",
                        "NOTE: The signing account does not need to own `amount` of assets at the point of",
                        "making this call.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account to delegate permission to transfer asset.",
                        "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                        "already an approval in place, then this acts additively.",
                        "",
                        "Emits `ApprovedTransfer` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be Signed and there must be an approval in place between signer and",
                        "`delegate`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "force_cancel_approval",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "delegate",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": [
                        "Cancel all of some asset approved for delegated transfer by a third-party account.",
                        "",
                        "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                        "account of the asset `id`.",
                        "",
                        "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `delegate`: The account delegated permission to transfer asset.",
                        "",
                        "Emits `ApprovalCancelled` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "transfer_approved",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "owner",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "destination",
                          "type": 137,
                          "typeName": "<T::Lookup as StaticLookup>::Source",
                          "docs": []
                        },
                        {
                          "name": "amount",
                          "type": 140,
                          "typeName": "T::Balance",
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": [
                        "Transfer some asset balance from a previously delegated account to some third-party",
                        "account.",
                        "",
                        "Origin must be Signed and there must be an approval in place by the `owner` to the",
                        "signer.",
                        "",
                        "If the entire amount approved for transfer is transferred, then any deposit previously",
                        "reserved by `approve_transfer` is unreserved.",
                        "",
                        "- `id`: The identifier of the asset.",
                        "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                        "from which the asset balance will be withdrawn.",
                        "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                        "- `amount`: The amount of assets to transfer.",
                        "",
                        "Emits `TransferredApproved` on success.",
                        "",
                        "Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "touch",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": [
                        "Create an asset account for non-provider assets.",
                        "",
                        "A deposit will be taken from the signer account.",
                        "",
                        "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                        "  to be taken.",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "",
                        "Emits `Touched` event when successful."
                      ]
                    },
                    {
                      "name": "refund",
                      "fields": [
                        {
                          "name": "id",
                          "type": 82,
                          "typeName": "T::AssetId",
                          "docs": []
                        },
                        {
                          "name": "allow_burn",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": [
                        "Return the deposit (if any) of an asset account.",
                        "",
                        "The origin must be Signed.",
                        "",
                        "- `id`: The identifier of the asset for the account to be created.",
                        "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                        "",
                        "Emits `Refunded` event when successful."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "DestroyWitness"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "accounts",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 82,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_xpub",
                      "fields": [
                        {
                          "name": "xpub",
                          "type": 222,
                          "typeName": "BoundedVec<u8, T::XPubLen>",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "## XPub insertion",
                        "",
                        "This extrinsic inserts a user-defined xpub",
                        "as well as in the pallet storage.",
                        "",
                        "### Parameters:",
                        "- `xpub`: Extended public key, it can be sent with or without fingerprint/derivation path",
                        "",
                        "### Considerations",
                        "- The origin must be Signed and the sender must have sufficient funds free for the transaction fee.",
                        "- This extrinsic is marked as transactional, so if an error is fired, all the changes will be reverted (but the",
                        " fees will be applied nonetheless).",
                        "- This extrinsic cannot handle a xpub update (yet). if it needs to be updated, remove it first and insert",
                        "a new one."
                      ]
                    },
                    {
                      "name": "remove_xpub",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "## Xpub removal",
                        "",
                        "Removes the linked xpub from the account which signs the transaction.",
                        "The xpub will be removed from both the pallet storage and identity registration.",
                        "",
                        "This tx does not takes any parameters.",
                        ""
                      ]
                    },
                    {
                      "name": "create_vault",
                      "fields": [
                        {
                          "name": "threshold",
                          "type": 4,
                          "typeName": "u32",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 223,
                          "typeName": "BoundedVec<u8, T::VaultDescriptionMaxLen>",
                          "docs": []
                        },
                        {
                          "name": "include_owner_as_cosigner",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        },
                        {
                          "name": "cosigners",
                          "type": 224,
                          "typeName": "BoundedVec<T::AccountId, T::MaxCosignersPerVault>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Vault insertion",
                        "",
                        "Inserts the vault on chain. Meant to be used by an offchain worker.",
                        "",
                        "### Parameters:",
                        "- `threshold`: The number of signatures needed for a proposal to be approved/finalized",
                        "- `description`: A small definition. What will the vault be used for?",
                        "- `include_owner_as_cosigner`: Add automatically the owner as cosigner",
                        "- `cosigners`: The other accounts that will participate in vault proposals.",
                        "",
                        "### Considerations",
                        "- Do not include the vault owner on the `cosigners` list.",
                        ""
                      ]
                    },
                    {
                      "name": "remove_vault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Vault removal",
                        "",
                        "Tries to remove vault and all its proposals, only the owner can call this extrinsic.",
                        "",
                        "### Parameters:",
                        "- `vault_id`: the vault to be removed with all its proposals",
                        "",
                        "### Considerations:",
                        "- Only the vault owner can perform this extrinsic",
                        ""
                      ]
                    },
                    {
                      "name": "propose",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "recipient_address",
                          "type": 222,
                          "typeName": "BoundedVec<u8, T::XPubLen>",
                          "docs": []
                        },
                        {
                          "name": "amount_in_sats",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 223,
                          "typeName": "BoundedVec<u8, T::VaultDescriptionMaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Vault transaction proposal",
                        "",
                        "Inserts a proposal on the specified vault.",
                        "",
                        "### Parameters:",
                        "- `vault_id`: the vault identifier in which the proposal will be inserted",
                        "- `recipient_address`: Mainnet address to which the funds will be send",
                        "- `amount_in_sats`: Amount to send in satoshis.",
                        "- `description`: The reason for the proposal, why do you are proposing this?.",
                        "",
                        "### Considerations",
                        "- Please ensure the recipient address is a valid mainnet address."
                      ]
                    },
                    {
                      "name": "remove_proposal",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Proposal removal",
                        "",
                        "Tries to remove a specified proposal. Only the user who created the proposal can remove it.",
                        "",
                        "### Parameters:",
                        "- `proposal_id`: the proposal identifier",
                        ""
                      ]
                    },
                    {
                      "name": "set_bdk_url",
                      "fields": [
                        {
                          "name": "new_url",
                          "type": 225,
                          "typeName": "BoundedVec<u8, ConstU32<32>>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "BDK URL insertion",
                        "",
                        "Changes the BDK-services endpoint, useful for pointing to the btc mainnet or testnet",
                        "",
                        "### Parameters:",
                        "- `new_url`: The new endpoint to which all the bdk related requests will be sent.  ",
                        "",
                        "### Considerations",
                        "- Ensure the new url is valid.",
                        "- The url has a maximum length of 32 bytes"
                      ]
                    },
                    {
                      "name": "save_psbt",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "signature_payload",
                          "type": 226,
                          "typeName": "BoundedVec<u8, T::PSBTMaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "PSBT signature insertion",
                        "",
                        "Stores the signature for a PSBT proposal ",
                        "",
                        "",
                        "### Parameters:",
                        "- `proposal_id`: the proposal identifier",
                        "- `signature_payload`: a blob of psbt bytes, resulting from a external wallet ",
                        "",
                        "### Considerations",
                        "- If successful, this process cannot be undone",
                        "- A user can only sign a proposal once "
                      ]
                    },
                    {
                      "name": "finalize_psbt",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "broadcast",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Finalize PSBT",
                        "",
                        "Queries a proposal to be finalized generating a tx_id in the process, it can also be broadcasted if specified.",
                        "",
                        "### Parameters:",
                        "- `proposal_id`: the proposal identifier",
                        "- `broadcast`: A boolean flag ",
                        "",
                        "### Considerations",
                        "- If successful, this process cannot be undone",
                        "- The proposal must have a valid PSBT",
                        "- Any vault member can perform this extrinsic"
                      ]
                    },
                    {
                      "name": "broadcast_psbt",
                      "fields": [
                        {
                          "name": "proposal_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Broadcast PSBT",
                        "",
                        "Queries a proposal to be broadcasted in case it wasn't on the finalization step.",
                        "",
                        "### Parameters:",
                        "- `proposal_id`: the vault identifier in which the proposal will be inserted",
                        "",
                        "### Considerations",
                        "- If successful, this process cannot be undone",
                        "- The proposal must be finalized already",
                        "- Any vault member can perform this extrinsic"
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Kill almost all storage",
                        "",
                        "Use with caution!",
                        "",
                        "Can only be called by root and removes All vaults and proposals"
                      ]
                    },
                    {
                      "name": "ocw_insert_descriptors",
                      "fields": [
                        {
                          "name": "payload",
                          "type": 227,
                          "typeName": "VaultsPayload<T::Public>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 234,
                          "typeName": "T::Signature",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Extrinsic to insert a valid vault descriptor",
                        "",
                        "Meant to be unsigned with signed payload and used by an offchain worker",
                        ""
                      ]
                    },
                    {
                      "name": "ocw_insert_psbts",
                      "fields": [
                        {
                          "name": "payload",
                          "type": 238,
                          "typeName": "ProposalsPayload<T::Public>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 234,
                          "typeName": "T::Signature",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Extrinsic to insert a valid proposal PSBT",
                        "",
                        "Meant to be unsigned with signed payload and used by an offchain worker",
                        ""
                      ]
                    },
                    {
                      "name": "ocw_finalize_psbts",
                      "fields": [
                        {
                          "name": "payload",
                          "type": 238,
                          "typeName": "ProposalsPayload<T::Public>",
                          "docs": []
                        },
                        {
                          "name": "signature",
                          "type": 234,
                          "typeName": "T::Signature",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Extrinsic to insert a valid proposal TX_ID",
                        "",
                        "Meant to be unsigned with signed payload and used by an offchain worker",
                        ""
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 224,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 225,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "VaultsPayload"
              ],
              "params": [
                {
                  "name": "Public",
                  "type": 228
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vaults_payload",
                      "type": 231,
                      "typeName": "Vec<SingleVaultPayload>",
                      "docs": []
                    },
                    {
                      "name": "public",
                      "type": 228,
                      "typeName": "Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSigner"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 31,
                          "typeName": "ed25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 108,
                          "typeName": "sr25519::Public",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 229,
                          "typeName": "ecdsa::Public",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 229,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Public"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 230,
                      "typeName": "[u8; 33]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 230,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 33,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 231,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 232
                }
              },
              "docs": []
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "SingleVaultPayload"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "output_descriptor",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "change_descriptor",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 233,
                      "typeName": "OffchainStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "OffchainStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Valid",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "RecoverableError",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "IrrecoverableError",
                      "fields": [
                        {
                          "name": null,
                          "type": 10,
                          "typeName": "Vec<u8>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 120,
                          "typeName": "ed25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "name": null,
                          "type": 235,
                          "typeName": "sr25519::Signature",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "name": null,
                          "type": 236,
                          "typeName": "ecdsa::Signature",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 121,
                      "typeName": "[u8; 64]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 237,
                      "typeName": "[u8; 65]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 237,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              },
              "docs": []
            }
          },
          {
            "id": 238,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "ProposalsPayload"
              ],
              "params": [
                {
                  "name": "Public",
                  "type": 228
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposals_payload",
                      "type": 239,
                      "typeName": "Vec<SingleProposalPayload>",
                      "docs": []
                    },
                    {
                      "name": "public",
                      "type": 228,
                      "typeName": "Public",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 239,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 240
                }
              },
              "docs": []
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "SingleProposalPayload"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposal_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "psbt",
                      "type": 10,
                      "typeName": "Vec<u8>",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 233,
                      "typeName": "OffchainStatus",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_rbac",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": []
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_vault",
                      "fields": [
                        {
                          "name": "user_id",
                          "type": 1,
                          "typeName": "UserId",
                          "docs": []
                        },
                        {
                          "name": "public_key",
                          "type": 1,
                          "typeName": "PublicKey",
                          "docs": []
                        },
                        {
                          "name": "cid",
                          "type": 71,
                          "typeName": "CID",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Create/Update a vault",
                        "",
                        "Creates/Updates the calling user's vault and sets their public cipher key",
                        ".",
                        "### Parameters:",
                        "- `origin`: The user that is configuring their vault",
                        "- `user_id`: User identifier generated from their login method, their address if using ",
                        "native login or user id if using SSO",
                        "- `public key`: The users cipher public key",
                        "- `cid`: The IPFS CID that contains the vaults data"
                      ]
                    },
                    {
                      "name": "set_owned_document",
                      "fields": [
                        {
                          "name": "owned_doc",
                          "type": 72,
                          "typeName": "OwnedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Create/Update an owned document",
                        "",
                        "Creates a new owned document or updates an existing owned document's metadata",
                        ".",
                        "### Parameters:",
                        "- `origin`: The user that is creating/updating an owned document",
                        "- `owned_doc`: Metadata related to the owned document"
                      ]
                    },
                    {
                      "name": "remove_owned_document",
                      "fields": [
                        {
                          "name": "cid",
                          "type": 71,
                          "typeName": "CID",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove an owned document",
                        "",
                        "Removes an owned document",
                        ".",
                        "### Parameters:",
                        "- `origin`: The owner of the document",
                        "- `cid`: of the document to be removed"
                      ]
                    },
                    {
                      "name": "share_document",
                      "fields": [
                        {
                          "name": "shared_doc",
                          "type": 75,
                          "typeName": "SharedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Share a document",
                        "",
                        "Creates a shared document",
                        ".",
                        "### Parameters:",
                        "- `origin`: The user that is creating the shared document",
                        "- `shared_doc`: Metadata related to the shared document"
                      ]
                    },
                    {
                      "name": "update_shared_document_metadata",
                      "fields": [
                        {
                          "name": "shared_doc",
                          "type": 75,
                          "typeName": "SharedDoc<T>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Update share document metadata",
                        "",
                        "Updates share document metadata, only the user with which the document",
                        "was shared can update it",
                        ".",
                        "### Parameters:",
                        "- `origin`: The \"to\" user of the shared document",
                        "- `shared_doc`: Metadata related to the shared document"
                      ]
                    },
                    {
                      "name": "remove_shared_document",
                      "fields": [
                        {
                          "name": "cid",
                          "type": 71,
                          "typeName": "CID",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Remove a shared document",
                        "",
                        "Removes a shared document, only the user with whom the document was",
                        "is able to remove it",
                        ".",
                        "### Parameters:",
                        "- `origin`: The \"to\" user of the shared document",
                        "- `cid`: of the document to be removed"
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Kill all the stored data.",
                        "",
                        "This function is used to kill ALL the stored data.",
                        "Use with caution!",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action. ",
                        "",
                        "### Considerations:",
                        "- This function is only available to the `admin` with sudo access."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "pallet_fund_admin",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initial_setup",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Initialize the pallet by setting the permissions for each role",
                        "& the global scope ",
                        "",
                        "# Considerations: ",
                        "- This function can only be called once",
                        "- This function can only be called usinf the sudo pallet"
                      ]
                    },
                    {
                      "name": "sudo_add_administrator",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        },
                        {
                          "name": "name",
                          "type": 71,
                          "typeName": "FieldName",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Adds an administrator account to the site",
                        "",
                        "# Parameters:",
                        "- origin: The sudo account",
                        "- admin: The administrator account to be added",
                        "- name: The name of the administrator account",
                        "",
                        "# Considerations:",
                        "- This function can only be called using the sudo pallet",
                        "- This function is used to add the first administrator to the site",
                        "- If the user is already registered, the function will return an error: UserAlreadyRegistered",
                        "- This function grants administator permissions to the user from the rbac pallet ",
                        "- Administator role have global scope permissions"
                      ]
                    },
                    {
                      "name": "sudo_remove_administrator",
                      "fields": [
                        {
                          "name": "admin",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Removes an administrator account from the site",
                        "",
                        "# Parameters:",
                        "- origin: The sudo account",
                        "- admin: The administrator account to be removed",
                        "",
                        "# Considerations:",
                        "- This function can only be called using the sudo pallet",
                        "- This function is used to remove any administrator from the site",
                        "- If the user is not registered, the function will return an error: UserNotFound",
                        "- This function removes administator permissions of the user from the rbac pallet",
                        "",
                        "# Note:",
                        "WARNING: Administrators can remove themselves from the site, ",
                        "but they can add themselves back"
                      ]
                    },
                    {
                      "name": "users",
                      "fields": [
                        {
                          "name": "users",
                          "type": 244,
                          "typeName": "BoundedVec<\n(T::AccountId, Option<BoundedVec<FieldName, T::MaxBoundedVecs>>,\nOption<ProxyRole>, CUDAction,), T::MaxRegistrationsAtTime>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "This extrinsic is used to create, update, or delete a user account ",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- user: The target user account to be registered, updated, or deleted. ",
                        "It is an array of user accounts where each entry it should be a tuple of the following:",
                        "- 0: The user account",
                        "- 1: The user name",
                        "- 2: The user role",
                        "- 3: The CUD operation to be performed on the user account. CUD action is ALWAYS required.",
                        "",
                        "# Considerations:",
                        "- Users parameters are optional because depends on the CUD action as follows:",
                        "* **Create**: The user account, user name, user role & CUD action are required",
                        "* **Update**: The user account & CUD action are required. The user name & user role are optionals.",
                        "* **Delete**: The user account & CUD action are required. ",
                        "- This function can only be called by an administrator account",
                        "- Multiple users can be registered, updated, or deleted at the same time, but ",
                        "the user account must be unique. Multiple actions over the same user account",
                        "in the same call, it could result in an unexpected behavior.",
                        "- If the user is already registered, the function will return an error: UserAlreadyRegistered",
                        "- If the user is not registered, the function will return an error: UserNotFound",
                        "",
                        "# Note:",
                        "WARNING: It is possible to register, update, or delete administators accounts using this extrinsic,",
                        "but administrators can not delete themselves.",
                        "WARNING: This function only registers, updates, or deletes users from the site. ",
                        "DOESN'T grant or remove permissions from the rbac pallet."
                      ]
                    },
                    {
                      "name": "users_edit_user",
                      "fields": [
                        {
                          "name": "name",
                          "type": 246,
                          "typeName": "Option<BoundedVec<FieldName, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "image",
                          "type": 246,
                          "typeName": "Option<BoundedVec<CID, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "email",
                          "type": 246,
                          "typeName": "Option<BoundedVec<FieldName, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "documents",
                          "type": 252,
                          "typeName": "Option<Documents<T>>",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Edits an user account",
                        "",
                        "# Parameters:",
                        "- origin: The user account which is being edited",
                        "- name: The name of the user account which is being edited",
                        "- image: The image of the user account which is being edited",
                        "- email: The email of the user account which is being edited",
                        "- documents: The documents of the user account which is being edited.",
                        "ONLY available for the investor role. ",
                        "",
                        "",
                        "# Considerations:",
                        "- If the user is not registered, the function will return an error: UserNotFound",
                        "- This function can only be called by a registered user account",
                        "- This function will be called by the user account itself",
                        "- ALL parameters are optional because depends on what is being edited",
                        "- ONLY the investor role can edit or update the documents"
                      ]
                    },
                    {
                      "name": "projects_create_project",
                      "fields": [
                        {
                          "name": "title",
                          "type": 71,
                          "typeName": "FieldName",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 254,
                          "typeName": "FieldDescription",
                          "docs": []
                        },
                        {
                          "name": "image",
                          "type": 71,
                          "typeName": "CID",
                          "docs": []
                        },
                        {
                          "name": "address",
                          "type": 71,
                          "typeName": "FieldName",
                          "docs": []
                        },
                        {
                          "name": "creation_date",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "completion_date",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "expenditures",
                          "type": 255,
                          "typeName": "BoundedVec<\n(Option<BoundedVec<FieldName, T::MaxBoundedVecs>>, Option<\nExpenditureType>, Option<u64>, Option<BoundedVec<FieldDescription, T\n::MaxBoundedVecs>>, Option<u32>, CUDAction, Option<[u8; 32]>,), T::\nMaxRegistrationsAtTime>",
                          "docs": []
                        },
                        {
                          "name": "users",
                          "type": 264,
                          "typeName": "Option<BoundedVec<(T::AccountId, ProxyRole, AssignAction,), T::\nMaxRegistrationsAtTime>>",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Registers a new project.",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- title: The title of the project",
                        "- description: The description of the project",
                        "- image: The image of the project (CID)",
                        "- address: The address of the project",
                        "- creation_date: The creation date of the project",
                        "- completion_date: The completion date of the project",
                        "- expenditures: The expenditures of the project. It is an array of tuples where each entry",
                        "is a tuple of the following:",
                        "* 0: The expenditure name",
                        "* 1: The expenditure type",
                        "* 2: The expenditure amount",
                        "* 3: The expenditure NAICS code",
                        "* 4: The expenditure jobs multiplier",
                        "* 5: The CUD action to be performed on the expenditure. CUD action is ALWAYS required.",
                        "* 6: The expenditure id. It is optional because it is only required when updating or deleting",
                        "- users: The users who will be assigned to the project. It is an array of tuples where each entry",
                        "is a tuple of the following:",
                        "* 0: The user account",
                        "* 1: The user role",
                        "* 2: The AssignAction to be performed on the user.",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- For users assignation, the user account must be registered. If the user is not registered,",
                        "the function will return an error. ALL parameters are required.",
                        "- For expenditures, apart from the expenditure id, naics code & jopbs multiplier, ALL parameters are required because for this",
                        "flow, the expenditures are always created. The naics code & the jobs multiplier",
                        "can be added later by the administrator.",
                        "- Creating a project will automatically create a scope for the project.",
                        "",
                        "# Note:",
                        "WARNING: If users are provided, the function will assign the users to the project, granting them",
                        "permissions in the rbac pallet."
                      ]
                    },
                    {
                      "name": "projects_edit_project",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "title",
                          "type": 246,
                          "typeName": "Option<BoundedVec<FieldName, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 259,
                          "typeName": "Option<BoundedVec<FieldDescription, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "image",
                          "type": 246,
                          "typeName": "Option<BoundedVec<CID, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "address",
                          "type": 246,
                          "typeName": "Option<BoundedVec<FieldName, T::MaxBoundedVecs>>",
                          "docs": []
                        },
                        {
                          "name": "creation_date",
                          "type": 92,
                          "typeName": "Option<u64>",
                          "docs": []
                        },
                        {
                          "name": "completion_date",
                          "type": 92,
                          "typeName": "Option<u64>",
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Edits a project.",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- project_id: The selected project id that will be edited",
                        "- title: The title of the project to be edited",
                        "- description: The description of the project to be edited",
                        "- image: The image of the project to be edited",
                        "- address: The address of the project to be edited",
                        "- creation_date: The creation date of the project to be edited",
                        "- completion_date: The completion date of the project to be edited",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- ALL parameters are optional because depends on what is being edited",
                        "- The project id is required because it is the only way to identify the project",
                        "- The project id must be registered. If the project is not registered, ",
                        "the function will return an error: ProjectNotFound",
                        "- It is not possible to edit the expenditures or the users assigned to the project ",
                        "through this function. For that, the administrator must use the extrinsics:",
                        "* expenditures",
                        "* projects_assign_user",
                        "- Project can only be edited in the Started status",
                        "- Completion date must be greater than creation date"
                      ]
                    },
                    {
                      "name": "projects_delete_project",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Deletes a project.",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- project_id: The selected project id that will be deleted",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- The project id is required because it is the only way to identify the project",
                        "- The project id must be registered. If the project is not registered,",
                        "the function will return an error: ProjectNotFound",
                        "",
                        "# Note:",
                        "- WARNING: Deleting a project will delete ALL stored information associated with the project.",
                        "BE CAREFUL."
                      ]
                    },
                    {
                      "name": "projects_assign_user",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "users",
                          "type": 265,
                          "typeName": "BoundedVec<(T::AccountId, ProxyRole, AssignAction,), T::\nMaxRegistrationsAtTime>",
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Assigns a user to a project.",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- project_id: The selected project id where user will be assigned",
                        "- users: The users to be assigned to the project. This is a vector of tuples ",
                        "where each entry is composed by:",
                        "* 0: The user account id",
                        "* 1: The user role",
                        "* 2: The AssignAction to be performed. (Assign or Unassign)",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- This extrinsic allows multiple users to be assigned/unassigned at the same time.",
                        "- The project id is required because it is the only way to identify the project",
                        "- This extrinsic is used for both assigning and unassigning users to a project",
                        "depending on the AssignAction. ",
                        "- After a user is assigned to a project, the user will be able to perform actions",
                        "in the project depending on the role assigned to the user.",
                        "- After a user is unassigned from a project, the user will not be able to perform actions",
                        "in the project anymore.",
                        "- If the user is already assigned to the project, the function will return an erro.",
                        "",
                        "# Note:",
                        "- WARNING: ALL provided users needs to be registered in the site. If any of the users",
                        "is not registered, the function will return an error.",
                        "- Assigning or unassigning a user to a project will add or remove permissions to the user",
                        "from the RBAC pallet.  ",
                        "- Warning: Cannot assign a user to a project with a different role than the one they ",
                        "have in UsersInfo. If the user has a different role, the function will return an error.",
                        "- Warning: Cannot unassign a user from a project with a different role than the one they",
                        "have in UsersInfo. If the user has a different role, the function will return an error.",
                        "- Warning: Do not perfom multiple actions over the same user in the same call, it could",
                        "result in an unexpected behavior."
                      ]
                    },
                    {
                      "name": "expenditures",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "expenditures",
                          "type": 255,
                          "typeName": "BoundedVec<\n(Option<BoundedVec<FieldName, T::MaxBoundedVecs>>, Option<\nExpenditureType>, Option<u64>, Option<BoundedVec<FieldDescription, T\n::MaxBoundedVecs>>, Option<u32>, CUDAction, Option<[u8; 32]>,), T::\nMaxRegistrationsAtTime>",
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "This extrinsic is used to create, update or delete expenditures.",
                        "",
                        "# Parameters:",
                        "- origin: The administrator account",
                        "- project_id: The selected project id where the expenditures will be created/updated/deleted",
                        "- expenditures: The expenditures to be created/updated/deleted. This is a vector of tuples",
                        "where each entry is composed by:",
                        "* 0: The name of the expenditure",
                        "* 1: The expenditure type",
                        "* 2: The amount of the expenditure",
                        "* 3: The naics code of the expenditure",
                        "* 4: The jobs multiplier of the expenditure",
                        "* 5: The expenditure action to be performed. (Create, Update or Delete)",
                        "* 6: The expenditure id. This is only used when updating or deleting an expenditure.",
                        "",
                        "# Considerations:",
                        "- Naics code and jobs multiplier are always optional.",
                        "- This function can only be called by an administrator account",
                        "- This extrinsic allows multiple expenditures to be created/updated/deleted at the same time.",
                        "- The project id is required because it is the only way to identify the project",
                        "- Expentiture parameters are optional because depends on the action to be performed:",
                        "* **Create**: Name, Type & Amount are required. Nacis code & Jobs multiplier are optional.",
                        "* **Update**: Except for the expenditure id & action, all parameters are optional.",
                        "* **Delete**: Only the expenditure id & action is required.",
                        "- Multiple actions can be performed at the same time. For example, you can create a new",
                        "expenditure and update another one at the same time.",
                        "- Do not perform multiple actions over the same expenditure in the same call, it could",
                        "result in an unexpected behavior."
                      ]
                    },
                    {
                      "name": "submit_drawdown",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "drawdown_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "transactions",
                          "type": 269,
                          "typeName": "Option<BoundedVec<\n(Option<[u8; 32]>, Option<u64>, Option<Documents<T>>, CUDAction,\nOption<[u8; 32]>,), T::MaxRegistrationsAtTime>>",
                          "docs": []
                        },
                        {
                          "name": "submit",
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "This extrinsic is used to create, update or delete transactions.",
                        "Transactions status can be saved as draft or submitted.",
                        "",
                        "# Parameters:",
                        "- origin: The user account who is creating the transactions",
                        "- project_id: The selected project id where the transactions will be created",
                        "- drawdown_id: The selected drawdown id where the transactions will be created",
                        "- transactions: The transactions to be created/updated/deleted. This is a vector of tuples",
                        "where each entry is composed by:",
                        "* 0: The expenditure id where the transaction will be created",
                        "* 1: The transaction amount",
                        "* 2: Documents associated to the transaction",
                        "* 3: The transaction action to be performed. (Create, Update or Delete)",
                        "* 4: The transaction id. This is only used when updating or deleting a transaction.",
                        "- submit: If true, the transactions will be submitted. ",
                        "If false, the transactions will be saved as draft.",
                        "",
                        "# Considerations:",
                        "- This function can only be called by a builder role account",
                        "- This extrinsic allows multiple transactions to be created/updated/deleted at the same time.",
                        "- The project id and drawdown id are required because are required for the reports.",
                        "- Transaction parameters are optional because depends on the action to be performed:",
                        "* **Create**: Expenditure id, Amount, Documents & Action are required.",
                        "* **Update**: Except for the transaction id & action, all parameters are optional.",
                        "* **Delete**: Only the transaction id & action is required.",
                        "- Multiple actions can be performed at the same time. For example, you can create a new",
                        "transaction and update another one at the same time.",
                        "- Do not perform multiple actions over the same transaction in the same call, it could",
                        "result in an unexpected behavior.",
                        "- If a drawdown is submitted, all transactions must be submitted too. If the drawdown do not contain",
                        "any transaction, it will be returned an error.",
                        "- After a drawdown is submitted, it can not be updated or deleted.",
                        "- After a drawdown is rejected, builders will use this extrinsic to update the transactions. "
                      ]
                    },
                    {
                      "name": "approve_drawdown",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "drawdown_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "bulkupload",
                          "type": 273,
                          "typeName": "Option<bool>",
                          "docs": []
                        },
                        {
                          "name": "transactions",
                          "type": 269,
                          "typeName": "Option<BoundedVec<\n(Option<[u8; 32]>, Option<u64>, Option<Documents<T>>, CUDAction,\nOption<[u8; 32]>,), T::MaxRegistrationsAtTime>>",
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Approves a drawdown",
                        "",
                        "# Parameters:",
                        "### For EB5 drawdowns:",
                        "- origin: The administator account who is approving the drawdown",
                        "- project_id: The selected project id where the drawdown will be approved",
                        "- drawdown_id: The selected drawdown id to be approved",
                        "",
                        "### For Construction Loan & Developer Equity (bulk uploads) drawdowns:",
                        "- origin: The administator account who is approving the drawdown",
                        "- project_id: The selected project id where the drawdown will be approved",
                        "- drawdown_id: The selected drawdown id to be approved.",
                        "- bulkupload: Optional bulkupload parameter. If true, the drawdown will be saved in a pseudo",
                        "draft status. If false, the drawdown will be approved directly.",
                        "- transactions: The transactions to be created/updated/deleted. This is a vector of tuples",
                        "where each entry is composed by:",
                        "* 0: The expenditure id where the transaction will be created",
                        "* 1: The transaction amount",
                        "* 2: Documents associated to the transaction",
                        "* 3: The transaction action to be performed. (Create, Update or Delete)",
                        "* 4: The transaction id. This is only used when updating or deleting a transaction.",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- This extrinsic allows multiple transactions to be created/updated/deleted at the same time ",
                        "(only for Construction Loan & Developer Equity drawdowns).",
                        "- Transaction parameters are optional because depends on the action to be performed:",
                        "* **Create**: Expenditure id, Amount, Documents & Action are required.",
                        "* **Update**: Except for the transaction id & action, all parameters are optional.",
                        "* **Delete**: Only the transaction id & action is required.",
                        "- Multiple actions can be performed at the same time. For example, you can create a new",
                        "transaction and update another one at the same time.",
                        "- Do not perform multiple actions over the same transaction in the same call, it could",
                        "result in an unexpected behavior.",
                        "- After a drawdown is approved, it can not be updated or deleted.",
                        "- After a drawdown is approved, the next drawdown will be automatically created."
                      ]
                    },
                    {
                      "name": "reject_drawdown",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "drawdown_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "transactions_feedback",
                          "type": 274,
                          "typeName": "Option<BoundedVec<([u8; 32], FieldDescription), T::\nMaxRegistrationsAtTime>>",
                          "docs": []
                        },
                        {
                          "name": "drawdown_feedback",
                          "type": 259,
                          "typeName": "Option<BoundedVec<FieldDescription, T::MaxBoundedVecs>>",
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Rejects a drawdown",
                        "",
                        "# Parameters:",
                        "- origin: The administator account who is rejecting the drawdown",
                        "- project_id: The selected project id where the drawdown will be rejected",
                        "- drawdown_id: The selected drawdown id to be rejected",
                        "",
                        "Then the next two feedback parameters are optional because depends on the drawdown type:",
                        "#### EB5 drawdowns:",
                        "- transactions_feedback: Administrator will provide feedback for each transaction ",
                        "that is wrong. This is a vector of tuples where each entry is composed by:",
                        "* 0: The transaction id",
                        "* 1: The transaction feedback",
                        "",
                        "#### Construction Loan & Developer Equity drawdowns:",
                        "- drawdown_feedback: Administrator will provide feedback for the WHOLE drawdown.",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- This extrinsic allows multiple transactions to be rejected at the same time ",
                        "(only for EB5 drawdowns).",
                        "- For EB5 drawdowns, the administrator can provide feedback for each transaction ",
                        "that is wrong.",
                        "- For Construction Loan & Developer Equity drawdowns, the administrator can provide ",
                        "feedback for the WHOLE drawdown.",
                        "- After a builder re-submits a drawdown, the administrator will have to review ",
                        "the drawdown again.",
                        "- After a builder re-submits a drawdown, the feedback field will be cleared automatically.",
                        "- If a single EB5 transaction is wrong, the administrator WILL reject the WHOLE drawdown.",
                        "There is no way to reject a single transaction."
                      ]
                    },
                    {
                      "name": "up_bulkupload",
                      "fields": [
                        {
                          "name": "project_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "drawdown_id",
                          "type": 1,
                          "typeName": "[u8; 32]",
                          "docs": []
                        },
                        {
                          "name": "description",
                          "type": 254,
                          "typeName": "FieldDescription",
                          "docs": []
                        },
                        {
                          "name": "total_amount",
                          "type": 8,
                          "typeName": "u64",
                          "docs": []
                        },
                        {
                          "name": "documents",
                          "type": 253,
                          "typeName": "Documents<T>",
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Bulk upload drawdowns.",
                        "",
                        "# Parameters:",
                        "- origin: The administator account who is uploading the drawdowns",
                        "- project_id: The selected project id where the drawdowns will be uploaded",
                        "- drawdown_id: The drawdowns to be uploaded",
                        "- description: The description of the drawdown provided by the builder",
                        "- total_amount: The total amount of the drawdown",
                        "- documents: The documents provided by the builder for the drawdown",
                        "",
                        "# Considerations:",
                        "- This function can only be called by a builder account",
                        "- This extrinsic allows only one drawdown to be uploaded at the same time.",
                        "- The drawdown will be automatically submitted.",
                        "- Only available for Construction Loan & Developer Equity drawdowns.",
                        "- After a builder uploads a drawdown, the administrator will have to review it.",
                        "- After a builder re-submits a drawdown, the feedback field will be cleared automatically.",
                        "- Bulkuploads does not allow individual transactions. ",
                        "- After a builder uploads a drawdown, the administrator will have to ",
                        "insert each transaction manually."
                      ]
                    },
                    {
                      "name": "inflation_rate",
                      "fields": [
                        {
                          "name": "projects",
                          "type": 278,
                          "typeName": "BoundedVec<([u8; 32], Option<u32>, CUDAction), T::\nMaxRegistrationsAtTime>",
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Modifies the inflation rate of a project.",
                        "",
                        "# Parameters:",
                        "- origin: The administator account who is modifying the inflation rate",
                        "- projects: The projects where the inflation rate will be modified.",
                        "This is a vector of tuples where each entry is composed by:",
                        "* 0: The project id",
                        "* 1: The inflation rate",
                        "* 2: The action to be performed (Create, Update or Delete)",
                        "",
                        "# Considerations:",
                        "- This function can only be called by an administrator account",
                        "- This extrinsic allows multiple projects to be modified at the same time.",
                        "- The inflation rate can be created, updated or deleted. ",
                        "- The inflation rate is optional because depends on the CUDAction parameter:",
                        "* **Create**: The inflation rate will be created. Project id, inflation rate and action are required.",
                        "* **Update**: The inflation rate will be updated. Project id, inflation rate and action are required.",
                        "* **Delete**: The inflation rate will be deleted. Project id and action are required.",
                        "- The inflation rate can only be modified if the project is in the \"started\" status.",
                        ""
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Kill all the stored data.",
                        "",
                        "This function is used to kill ALL the stored data.",
                        "Use it with caution!",
                        "",
                        "### Parameters:",
                        "- `origin`: The user who performs the action. ",
                        "",
                        "### Considerations:",
                        "- This function is only available to the `admin` with sudo access."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 244,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 245
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 251,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 245,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  246,
                  248,
                  250
                ]
              },
              "docs": []
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 247
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 247,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 217,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 249
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 249,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "ProxyRole"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Administrator",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Builder",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Investor",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Issuer",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "RegionalCenter",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "CUDAction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Create",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Update",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Delete",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 251,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 245
                }
              },
              "docs": []
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 253
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 253,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 212
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 213,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 256
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 263,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 256,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  246,
                  257,
                  92,
                  259,
                  58,
                  250,
                  262
                ]
              },
              "docs": []
            }
          },
          {
            "id": 257,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 258
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 258,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 258,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "ExpenditureType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "HardCost",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "SoftCost",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Operational",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Others",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 260
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 260,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 260,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 254
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 261,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 261,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 254
                }
              },
              "docs": []
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 1,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 263,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 256
                }
              },
              "docs": []
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 265
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 265,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 265,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 266
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 268,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 266,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  249,
                  267
                ]
              },
              "docs": []
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "AssignAction"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Assign",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Unassign",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 268,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 266
                }
              },
              "docs": []
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 270
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 270,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 271
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 272,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 271,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  262,
                  92,
                  252,
                  250,
                  262
                ]
              },
              "docs": []
            }
          },
          {
            "id": 272,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 271
                }
              },
              "docs": []
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 45
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 45,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 275
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 275,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 275,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 276
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 277,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 276,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  1,
                  254
                ]
              },
              "docs": []
            }
          },
          {
            "id": 277,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 276
                }
              },
              "docs": []
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 280,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 279,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  1,
                  58,
                  250
                ]
              },
              "docs": []
            }
          },
          {
            "id": 280,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 279
                }
              },
              "docs": []
            }
          },
          {
            "id": 281,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "pallet_template",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoneValue",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Error names should be descriptive."
                      ]
                    },
                    {
                      "name": "StorageOverflow",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Errors should have helpful documentation associated with them."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "Registration"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "MaxJudgements",
                  "type": null
                },
                {
                  "name": "MaxAdditionalFields",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "judgements",
                      "type": 284,
                      "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "info",
                      "type": 150,
                      "typeName": "IdentityInfo<MaxAdditionalFields>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 285
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 286,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 285,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  189
                ]
              },
              "docs": []
            }
          },
          {
            "id": 286,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 285
                }
              },
              "docs": []
            }
          },
          {
            "id": 287,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  288
                ]
              },
              "docs": []
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 289,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 290
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 292,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 290,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 291
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 291,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "pallet_identity",
                "types",
                "RegistrarInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "type": 187,
                      "typeName": "IdentityFields",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 292,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 290
                }
              },
              "docs": []
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "pallet_identity",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManySubAccounts",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Too many subs-accounts."
                      ]
                    },
                    {
                      "name": "NotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Account isn't found."
                      ]
                    },
                    {
                      "name": "NotNamed",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Account isn't named."
                      ]
                    },
                    {
                      "name": "EmptyIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Empty index."
                      ]
                    },
                    {
                      "name": "FeeChanged",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Fee is changed."
                      ]
                    },
                    {
                      "name": "NoIdentity",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "No identity found."
                      ]
                    },
                    {
                      "name": "StickyJudgement",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Sticky judgement."
                      ]
                    },
                    {
                      "name": "JudgementGiven",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Judgement given."
                      ]
                    },
                    {
                      "name": "InvalidJudgement",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Invalid judgement."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The index is invalid."
                      ]
                    },
                    {
                      "name": "InvalidTarget",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The target is invalid."
                      ]
                    },
                    {
                      "name": "TooManyFields",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Too many additional fields."
                      ]
                    },
                    {
                      "name": "TooManyRegistrars",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "Maximum amount of registrars reached. Cannot add any more."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Account ID is already named."
                      ]
                    },
                    {
                      "name": "NotSub",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Sender is not a sub-account."
                      ]
                    },
                    {
                      "name": "NotOwned",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Sub-account isn't owned by sender."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 294,
            "type": {
              "path": [
                "pallet_recovery",
                "RecoveryConfig"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 295
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "delay_period",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": 295,
                      "typeName": "Friends",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 101,
                      "typeName": "u16",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 296,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "pallet_recovery",
                "ActiveRecovery"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Friends",
                  "type": 295
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "created",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "friends",
                      "type": 295,
                      "typeName": "Friends",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "pallet_recovery",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAllowed",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "User is not allowed to make a call on behalf of this account"
                      ]
                    },
                    {
                      "name": "ZeroThreshold",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Threshold must be greater than zero"
                      ]
                    },
                    {
                      "name": "NotEnoughFriends",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Friends list must be greater than zero and threshold"
                      ]
                    },
                    {
                      "name": "MaxFriends",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Friends list must be less than max friends"
                      ]
                    },
                    {
                      "name": "NotSorted",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Friends list must be sorted and free of duplicates"
                      ]
                    },
                    {
                      "name": "NotRecoverable",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "This account is not set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyRecoverable",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "AlreadyStarted",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "A recovery process has already started for this account"
                      ]
                    },
                    {
                      "name": "NotStarted",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "A recovery process has not started for this rescuer"
                      ]
                    },
                    {
                      "name": "NotFriend",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "This account is not a friend who can vouch"
                      ]
                    },
                    {
                      "name": "DelayPeriod",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The friend must wait until the delay period to vouch for this recovery"
                      ]
                    },
                    {
                      "name": "AlreadyVouched",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "This user has already vouched for this recovery"
                      ]
                    },
                    {
                      "name": "Threshold",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The threshold for recovering this account has not been met"
                      ]
                    },
                    {
                      "name": "StillActive",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "There are still active recovery attempts that need to be closed"
                      ]
                    },
                    {
                      "name": "AlreadyProxy",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "This account is already set up for recovery"
                      ]
                    },
                    {
                      "name": "BadState",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Some internal state is broken."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 299,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  6,
                  45
                ]
              },
              "docs": []
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_indices",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotAssigned",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The index was not already assigned."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The index is assigned to another account."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The index was not available."
                      ]
                    },
                    {
                      "name": "NotTransfer",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The source and destination accounts are identical."
                      ]
                    },
                    {
                      "name": "Permanent",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The index is permanent and may not be freed/changed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "pallet_treasury",
                "Proposal"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "beneficiary",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 57,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Permill"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 100,
                      "typeName": "[u8; 8]",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_treasury",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "TooManyApprovals",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many approvals in the queue."
                      ]
                    },
                    {
                      "name": "InsufficientPermission",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The spend origin is valid but the amount it is allowed to spend is lower than the",
                        "amount to be spent."
                      ]
                    },
                    {
                      "name": "ProposalNotApproved",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Proposal has not been approved."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the treasury pallet."
              ]
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 78,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "pallet_collective",
                "Votes"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 4,
                      "typeName": "ProposalIndex",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "MemberCount",
                      "docs": []
                    },
                    {
                      "name": "ayes",
                      "type": 53,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "nays",
                      "type": 53,
                      "typeName": "Vec<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "end",
                      "type": 4,
                      "typeName": "BlockNumber",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "pallet_collective",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account is not a member"
                      ]
                    },
                    {
                      "name": "DuplicateProposal",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Duplicate proposals not allowed"
                      ]
                    },
                    {
                      "name": "ProposalMissing",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Proposal must exist"
                      ]
                    },
                    {
                      "name": "WrongIndex",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Mismatched index"
                      ]
                    },
                    {
                      "name": "DuplicateVote",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Duplicate vote ignored"
                      ]
                    },
                    {
                      "name": "AlreadyInitialized",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Members are already initialized!"
                      ]
                    },
                    {
                      "name": "TooEarly",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The close call was made too early, before the end of the voting."
                      ]
                    },
                    {
                      "name": "TooManyProposals",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "There can only be a maximum of `MaxProposals` active proposals."
                      ]
                    },
                    {
                      "name": "WrongProposalWeight",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The given weight bound for the proposal was too low."
                      ]
                    },
                    {
                      "name": "WrongProposalLength",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The given length bound for the proposal was too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "pallet_membership",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Already a member."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Not a member."
                      ]
                    },
                    {
                      "name": "TooManyMembers",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Too many members."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 48
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 51,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "pallet_node_authorization",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PeerIdTooLong",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The PeerId is too long."
                      ]
                    },
                    {
                      "name": "TooManyNodes",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Too many well known nodes."
                      ]
                    },
                    {
                      "name": "AlreadyJoined",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The node is already joined in the list."
                      ]
                    },
                    {
                      "name": "NotExist",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The node doesn't exist in the list."
                      ]
                    },
                    {
                      "name": "AlreadyClaimed",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The node is already claimed by a user."
                      ]
                    },
                    {
                      "name": "NotClaimed",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The node hasn't been claimed yet."
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "You are not the owner of the node."
                      ]
                    },
                    {
                      "name": "PermissionDenied",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "No permisson to perform specific operation."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 313,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 314
                }
              },
              "docs": []
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "pallet_society",
                "Bid"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "who",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "kind",
                      "type": 315,
                      "typeName": "BidKind<AccountId, Balance>",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "pallet_society",
                "BidKind"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Vouch",
                      "fields": [
                        {
                          "name": null,
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 316,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  315
                ]
              },
              "docs": []
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "pallet_society",
                "VouchingStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Vouching",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Banned",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 318,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 319
                }
              },
              "docs": []
            }
          },
          {
            "id": 319,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 320,
            "type": {
              "path": [
                "pallet_society",
                "Vote"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Skeptic",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Reject",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Approve",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 321,
            "type": {
              "path": [
                "pallet_society",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadPosition",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "An incorrect position was provided."
                      ]
                    },
                    {
                      "name": "NotMember",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "User is not a member."
                      ]
                    },
                    {
                      "name": "AlreadyMember",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "User is already a member."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "User is suspended."
                      ]
                    },
                    {
                      "name": "NotSuspended",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "User is not suspended."
                      ]
                    },
                    {
                      "name": "NoPayout",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Nothing to payout."
                      ]
                    },
                    {
                      "name": "AlreadyFounded",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Society already founded."
                      ]
                    },
                    {
                      "name": "InsufficientPot",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Not enough in pot to accept candidate."
                      ]
                    },
                    {
                      "name": "AlreadyVouching",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Member is already vouching or banned from vouching again."
                      ]
                    },
                    {
                      "name": "NotVouching",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Member is not vouching."
                      ]
                    },
                    {
                      "name": "Head",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Cannot remove the head of the chain."
                      ]
                    },
                    {
                      "name": "Founder",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Cannot remove the founder."
                      ]
                    },
                    {
                      "name": "AlreadyBid",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "User has already made a bid."
                      ]
                    },
                    {
                      "name": "AlreadyCandidate",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "User is already a candidate."
                      ]
                    },
                    {
                      "name": "NotCandidate",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "User is not a candidate."
                      ]
                    },
                    {
                      "name": "MaxMembers",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Too many members in the society."
                      ]
                    },
                    {
                      "name": "NotFounder",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The caller is not the founder."
                      ]
                    },
                    {
                      "name": "NotHead",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The caller is not the head."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "pallet_bounties",
                "Bounty"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "value",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "curator_deposit",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "bond",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 323,
                      "typeName": "BountyStatus<AccountId, BlockNumber>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 323,
            "type": {
              "path": [
                "pallet_bounties",
                "BountyStatus"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Proposed",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Approved",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Funded",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "CuratorProposed",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "update_due",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [
                        {
                          "name": "curator",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "beneficiary",
                          "type": 0,
                          "typeName": "AccountId",
                          "docs": []
                        },
                        {
                          "name": "unlock_at",
                          "type": 4,
                          "typeName": "BlockNumber",
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 324,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "pallet_bounties",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientProposersBalance",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Proposer's balance is too low."
                      ]
                    },
                    {
                      "name": "InvalidIndex",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "No proposal or bounty at that index."
                      ]
                    },
                    {
                      "name": "ReasonTooBig",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The reason given is just too big."
                      ]
                    },
                    {
                      "name": "UnexpectedStatus",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The bounty status is unexpected."
                      ]
                    },
                    {
                      "name": "RequireCurator",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Require bounty curator."
                      ]
                    },
                    {
                      "name": "InvalidValue",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Invalid bounty value."
                      ]
                    },
                    {
                      "name": "InvalidFee",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid bounty fee."
                      ]
                    },
                    {
                      "name": "PendingPayout",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "A bounty payout is pending.",
                        "To cancel the bounty, you must unassign and slash the curator."
                      ]
                    },
                    {
                      "name": "Premature",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The bounties cannot be claimed/closed because it's still in the countdown period."
                      ]
                    },
                    {
                      "name": "HasActiveChildBounty",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The bounty cannot be closed because it has active child bounties."
                      ]
                    },
                    {
                      "name": "TooManyQueued",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Too many approvals are already queued."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "CollectionDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "total_deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "free_holding",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "items",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "item_metadatas",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "attributes",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 327,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  4,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 328,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  4
                ]
              },
              "docs": []
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "ItemDetails"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "approved",
                      "type": 38,
                      "typeName": "Option<AccountId>",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "CollectionMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 56,
                      "typeName": "BoundedVec<u8, StringLimit>",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "pallet_uniques",
                "types",
                "ItemMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "StringLimit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "data",
                      "type": 56,
                      "typeName": "BoundedVec<u8, StringLimit>",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 332,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  58,
                  59
                ]
              },
              "docs": []
            }
          },
          {
            "id": 333,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  60,
                  6
                ]
              },
              "docs": []
            }
          },
          {
            "id": 334,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  6,
                  38
                ]
              },
              "docs": []
            }
          },
          {
            "id": 335,
            "type": {
              "path": [
                "pallet_uniques",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "UnknownCollection",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The item ID has already been used for an item."
                      ]
                    },
                    {
                      "name": "WrongOwner",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The owner turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The item ID is already taken."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The item or collection is frozen."
                      ]
                    },
                    {
                      "name": "WrongDelegate",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The delegate turned out to be different to what was expected."
                      ]
                    },
                    {
                      "name": "NoDelegate",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "There is no delegate approved."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "Unaccepted",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The named owner has not signed ownership of the collection is acceptable."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The item is locked."
                      ]
                    },
                    {
                      "name": "MaxSupplyReached",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "All items have been minted."
                      ]
                    },
                    {
                      "name": "MaxSupplyAlreadySet",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The max supply has already been set."
                      ]
                    },
                    {
                      "name": "MaxSupplyTooSmall",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The provided max supply is less to the amount of items a collection already has."
                      ]
                    },
                    {
                      "name": "UnknownItem",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The given item ID is unknown."
                      ]
                    },
                    {
                      "name": "NotForSale",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "Item is not for sale."
                      ]
                    },
                    {
                      "name": "BidTooLow",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The provided bid is too low."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 337
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 337,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "pallet_fruniques",
                "types",
                "ChildInfo"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collection_id",
                      "type": 4,
                      "typeName": "CollectionId",
                      "docs": []
                    },
                    {
                      "name": "child_id",
                      "type": 4,
                      "typeName": "ItemId",
                      "docs": []
                    },
                    {
                      "name": "is_hierarchical",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "weight",
                      "type": 303,
                      "typeName": "Permill",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "pallet_fruniques",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "NotAdmin",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "StorageOverflow",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "NotYetImplemented",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "FruniqueCntOverflow",
                      "fields": [],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "NotAFrunique",
                      "fields": [],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "KeyTooLong",
                      "fields": [],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "ValueTooLong",
                      "fields": [],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "AttributesEmpty",
                      "fields": [],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "CollectionNotFound",
                      "fields": [],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "ParentNotFound",
                      "fields": [],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "FruniqueNotFound",
                      "fields": [],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "CollectionAlreadyExists",
                      "fields": [],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "FruniqueAlreadyExists",
                      "fields": [],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "FruniqueAlreadyVerified",
                      "fields": [],
                      "index": 14,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "Marketplace"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "label",
                      "type": 210,
                      "typeName": "BoundedVec<u8, T::LabelMaxLen>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "Application"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "status",
                      "type": 64,
                      "typeName": "ApplicationStatus",
                      "docs": []
                    },
                    {
                      "name": "fields",
                      "type": 341,
                      "typeName": "BoundedVec<ApplicationField, T::MaxFiles>",
                      "docs": []
                    },
                    {
                      "name": "feedback",
                      "type": 218,
                      "typeName": "BoundedVec<u8, T::MaxFeedbackLen>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 342
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 344,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "ApplicationField"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "display_name",
                      "type": 71,
                      "typeName": "BoundedVec<u8, ConstU32<100>>",
                      "docs": []
                    },
                    {
                      "name": "cid",
                      "type": 71,
                      "typeName": "Cid",
                      "docs": []
                    },
                    {
                      "name": "custodian_cid",
                      "type": 343,
                      "typeName": "Option<Cid>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 71,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 344,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 342
                }
              },
              "docs": []
            }
          },
          {
            "id": 345,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  1
                ]
              },
              "docs": []
            }
          },
          {
            "id": 346,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  1,
                  64
                ]
              },
              "docs": []
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 350,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 1
                }
              },
              "docs": []
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "OfferData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "marketplace_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "collection_id",
                      "type": 4,
                      "typeName": "T::CollectionId",
                      "docs": []
                    },
                    {
                      "name": "item_id",
                      "type": 4,
                      "typeName": "T::ItemId",
                      "docs": []
                    },
                    {
                      "name": "creator",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "price",
                      "type": 6,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 352,
                      "typeName": "OfferStatus",
                      "docs": []
                    },
                    {
                      "name": "creation_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "expiration_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "offer_type",
                      "type": 353,
                      "typeName": "OfferType",
                      "docs": []
                    },
                    {
                      "name": "buyer",
                      "type": 354,
                      "typeName": "Option<(T::AccountId,[u8; 32])>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "OfferStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Open",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Closed",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 353,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "types",
                "OfferType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SellOrder",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "BuyOrder",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 345
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 345,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "pallet_gated_marketplace",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitExceeded",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Limit bounded vector exceeded"
                      ]
                    },
                    {
                      "name": "ExceedMaxMarketsPerAuth",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account supervises too many marketplaces"
                      ]
                    },
                    {
                      "name": "ExceedMaxRolesPerAuth",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The account has too many roles in that marketplace"
                      ]
                    },
                    {
                      "name": "ExceedMaxApplicants",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Too many applicants for this market! try again later"
                      ]
                    },
                    {
                      "name": "ExceedMaxApplicationsPerCustodian",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "This custodian has too many applications for this market, try with another one"
                      ]
                    },
                    {
                      "name": "ApplicationNotFound",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Applicaion doesnt exist"
                      ]
                    },
                    {
                      "name": "ApplicantNotFound",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The user has not applicated to that market before"
                      ]
                    },
                    {
                      "name": "ApplicantCannotBeCustodian",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The user cannot be custodian of its own application"
                      ]
                    },
                    {
                      "name": "MarketplaceAlreadyExists",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "A marketplace with the same data exists already"
                      ]
                    },
                    {
                      "name": "AlreadyApplied",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The user has already applied to the marketplace (or an identical application exist)"
                      ]
                    },
                    {
                      "name": "MarketplaceNotFound",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The specified marketplace does not exist"
                      ]
                    },
                    {
                      "name": "NotOwnerOrAdmin",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "You need to be an owner or an admin of the marketplace"
                      ]
                    },
                    {
                      "name": "AlreadyEnrolled",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "There was no change regarding the application status"
                      ]
                    },
                    {
                      "name": "OnlyOneOwnerIsAllowed",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "There cannot be more than one owner per marketplace"
                      ]
                    },
                    {
                      "name": "CantRemoveOwner",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Cannot remove the owner of the marketplace"
                      ]
                    },
                    {
                      "name": "AdminCannotRemoveItself",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Admin can not remove itself from the marketplace"
                      ]
                    },
                    {
                      "name": "UserNotFound",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "User not found"
                      ]
                    },
                    {
                      "name": "OwnerNotFound",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "Owner not found"
                      ]
                    },
                    {
                      "name": "AuthorityNotFoundForUser",
                      "fields": [],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "CannotDeleteAdmin",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "Admis cannot be deleted between them, only the owner can"
                      ]
                    },
                    {
                      "name": "ApplicationIdNotFound",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "Application ID not found"
                      ]
                    },
                    {
                      "name": "ApplicationStatusStillPending",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "Application status is still pending, user cannot apply/reapply"
                      ]
                    },
                    {
                      "name": "ApplicationHasAlreadyBeenApproved",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The application has already been approved, application status is approved"
                      ]
                    },
                    {
                      "name": "CollectionNotFound",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "Collection not found"
                      ]
                    },
                    {
                      "name": "NotOwner",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "User who calls the function is not the owner of the collection"
                      ]
                    },
                    {
                      "name": "OfferAlreadyExists",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "Offer already exists"
                      ]
                    },
                    {
                      "name": "OfferNotFound",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "Offer not found"
                      ]
                    },
                    {
                      "name": "OfferIsNotAvailable",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "Offer is not available at the moment"
                      ]
                    },
                    {
                      "name": "CannotTakeOffer",
                      "fields": [],
                      "index": 28,
                      "docs": [
                        "Owner cannnot buy its own offer"
                      ]
                    },
                    {
                      "name": "CannotRemoveOffer",
                      "fields": [],
                      "index": 29,
                      "docs": [
                        "User cannot remove the offer from the marketplace"
                      ]
                    },
                    {
                      "name": "TimestampError",
                      "fields": [],
                      "index": 30,
                      "docs": [
                        "Error related to the timestamp"
                      ]
                    },
                    {
                      "name": "NotEnoughBalance",
                      "fields": [],
                      "index": 31,
                      "docs": [
                        "User does not have enough balance to buy the offer"
                      ]
                    },
                    {
                      "name": "CannotDeleteOffer",
                      "fields": [],
                      "index": 32,
                      "docs": [
                        "User cannot delete the offer because is closed"
                      ]
                    },
                    {
                      "name": "OfferStorageError",
                      "fields": [],
                      "index": 33,
                      "docs": [
                        "There was a problem storing the offer"
                      ]
                    },
                    {
                      "name": "PriceMustBeGreaterThanZero",
                      "fields": [],
                      "index": 34,
                      "docs": [
                        "Price must be greater than zero"
                      ]
                    },
                    {
                      "name": "CannotCreateOffer",
                      "fields": [],
                      "index": 35,
                      "docs": [
                        "User cannot create buy offers for their own items"
                      ]
                    },
                    {
                      "name": "ItemNotForSale",
                      "fields": [],
                      "index": 36,
                      "docs": [
                        "This items is not available for sale"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "admin",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "freezer",
                      "type": 0,
                      "typeName": "AccountId",
                      "docs": []
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "min_balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_sufficient",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "accounts",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "approvals",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 357,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetAccount"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "Extra",
                  "type": 37
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "balance",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    },
                    {
                      "name": "reason",
                      "type": 359,
                      "typeName": "ExistenceReason<DepositBalance>",
                      "docs": []
                    },
                    {
                      "name": "extra",
                      "type": 37,
                      "typeName": "Extra",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "ExistenceReason"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consumer",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Sufficient",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DepositHeld",
                      "fields": [
                        {
                          "name": null,
                          "type": 6,
                          "typeName": "Balance",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "DepositRefunded",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 360,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  4,
                  0,
                  0
                ]
              },
              "docs": []
            }
          },
          {
            "id": 361,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "Approval"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "DepositBalance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance",
                      "docs": []
                    },
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "pallet_assets",
                "types",
                "AssetMetadata"
              ],
              "params": [
                {
                  "name": "DepositBalance",
                  "type": 6
                },
                {
                  "name": "BoundedString",
                  "type": 56
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "deposit",
                      "type": 6,
                      "typeName": "DepositBalance",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 56,
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "symbol",
                      "type": 56,
                      "typeName": "BoundedString",
                      "docs": []
                    },
                    {
                      "name": "decimals",
                      "type": 2,
                      "typeName": "u8",
                      "docs": []
                    },
                    {
                      "name": "is_frozen",
                      "type": 45,
                      "typeName": "bool",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "pallet_assets",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceLow",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Account balance must be greater than or equal to the transfer amount."
                      ]
                    },
                    {
                      "name": "NoAccount",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The account to alter does not exist."
                      ]
                    },
                    {
                      "name": "NoPermission",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The signing account has no permission to do the operation."
                      ]
                    },
                    {
                      "name": "Unknown",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The given asset ID is unknown."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The origin account is frozen."
                      ]
                    },
                    {
                      "name": "InUse",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The asset ID is already taken."
                      ]
                    },
                    {
                      "name": "BadWitness",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Invalid witness data given."
                      ]
                    },
                    {
                      "name": "MinBalanceZero",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Minimum balance should be non-zero."
                      ]
                    },
                    {
                      "name": "NoProvider",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "Unable to increment the consumer reference counters on the account. Either no provider",
                        "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                        "maximum number of consumers has been reached."
                      ]
                    },
                    {
                      "name": "BadMetadata",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "Invalid metadata given."
                      ]
                    },
                    {
                      "name": "Unapproved",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "No approval exists that would allow the transfer."
                      ]
                    },
                    {
                      "name": "WouldDie",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The source account would not survive the transfer and it needs to stay alive."
                      ]
                    },
                    {
                      "name": "AlreadyExists",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The asset-account already exists."
                      ]
                    },
                    {
                      "name": "NoDeposit",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The asset-account doesn't have an associated deposit."
                      ]
                    },
                    {
                      "name": "WouldBurn",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The operation would result in funds being burned."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "Proposal"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proposer",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "vault_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 365,
                      "typeName": "ProposalStatus",
                      "docs": []
                    },
                    {
                      "name": "offchain_status",
                      "type": 366,
                      "typeName": "BDKStatus<T::VaultDescriptionMaxLen>",
                      "docs": []
                    },
                    {
                      "name": "to_address",
                      "type": 222,
                      "typeName": "BoundedVec<u8, T::XPubLen>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "fee_sat_per_vb",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 223,
                      "typeName": "BoundedVec<u8, T::VaultDescriptionMaxLen>",
                      "docs": []
                    },
                    {
                      "name": "tx_id",
                      "type": 367,
                      "typeName": "Option<BoundedVec<u8, T::VaultDescriptionMaxLen>>",
                      "docs": []
                    },
                    {
                      "name": "psbt",
                      "type": 226,
                      "typeName": "BoundedVec<u8, T::PSBTMaxLen>",
                      "docs": []
                    },
                    {
                      "name": "signed_psbts",
                      "type": 368,
                      "typeName": "BoundedVec<ProposalSignatures<T>, T::MaxCosignersPerVault>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "ProposalStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ReadyToFinalize",
                      "fields": [
                        {
                          "name": null,
                          "type": 45,
                          "typeName": "bool",
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Finalized",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Broadcasted",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "BDKStatus"
              ],
              "params": [
                {
                  "name": "MaxLen",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Valid",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "RecoverableError",
                      "fields": [
                        {
                          "name": null,
                          "type": 223,
                          "typeName": "BoundedVec<u8, MaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "IrrecoverableError",
                      "fields": [
                        {
                          "name": null,
                          "type": 223,
                          "typeName": "BoundedVec<u8, MaxLen>",
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 367,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 223
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 223,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 369
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 370,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "ProposalSignatures"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "signer",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "signature",
                      "type": 226,
                      "typeName": "BoundedVec<u8, T::PSBTMaxLen>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 370,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "sequence": {
                  "type": 369
                }
              },
              "docs": []
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "Vault"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner",
                      "type": 0,
                      "typeName": "T::AccountId",
                      "docs": []
                    },
                    {
                      "name": "threshold",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 223,
                      "typeName": "BoundedVec<u8, T::VaultDescriptionMaxLen>",
                      "docs": []
                    },
                    {
                      "name": "cosigners",
                      "type": 224,
                      "typeName": "BoundedVec<T::AccountId, T::MaxCosignersPerVault>",
                      "docs": []
                    },
                    {
                      "name": "descriptors",
                      "type": 373,
                      "typeName": "Descriptors<T::OutputDescriptorMaxLen>",
                      "docs": []
                    },
                    {
                      "name": "offchain_status",
                      "type": 366,
                      "typeName": "BDKStatus<T::VaultDescriptionMaxLen>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "types",
                "Descriptors"
              ],
              "params": [
                {
                  "name": "MaxLen",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "output_descriptor",
                      "type": 374,
                      "typeName": "BoundedVec<u8, MaxLen>",
                      "docs": []
                    },
                    {
                      "name": "change_descriptor",
                      "type": 375,
                      "typeName": "Option<BoundedVec<u8, MaxLen>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 374
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 374,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "pallet_bitcoin_vaults",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotYetImplemented",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Work in progress!"
                      ]
                    },
                    {
                      "name": "NoneValue",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Xpub shouldn't be empty"
                      ]
                    },
                    {
                      "name": "XPubAlreadyTaken",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "XPubNotFound",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The Account doesn't have an xpub"
                      ]
                    },
                    {
                      "name": "UserAlreadyHasXpub",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The user already has an xpub, try to remove it first"
                      ]
                    },
                    {
                      "name": "XpubLinkedToVault",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The Xpub cant be removed/changed because a vault needs it"
                      ]
                    },
                    {
                      "name": "HashingError",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The generated Hashes aren't the same"
                      ]
                    },
                    {
                      "name": "InvalidAdditionalField",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Found Invalid name on an additional field"
                      ]
                    },
                    {
                      "name": "InvalidVaultThreshold",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The vault threshold cannot be greater than the number of vault participants"
                      ]
                    },
                    {
                      "name": "SignerVaultLimit",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "A defined cosigner reached its vault limit"
                      ]
                    },
                    {
                      "name": "ExceedMaxCosignersPerVault",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Too many cosigners"
                      ]
                    },
                    {
                      "name": "VaultNotFound",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Vault not found"
                      ]
                    },
                    {
                      "name": "NotEnoughCosigners",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "A vault needs at least 1 cosigner"
                      ]
                    },
                    {
                      "name": "VaultOwnerPermissionsNeeded",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Only the owner of this vault can do this transaction"
                      ]
                    },
                    {
                      "name": "DuplicateVaultMembers",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Vault members cannot be duplicate"
                      ]
                    },
                    {
                      "name": "SignerPermissionsNeeded",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The account must participate in the vault to make a proposal or sign"
                      ]
                    },
                    {
                      "name": "ExceedMaxProposalsPerVault",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The vault has too many proposals "
                      ]
                    },
                    {
                      "name": "ProposalNotFound",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "Proposal not found (id)"
                      ]
                    },
                    {
                      "name": "ProposerPermissionsNeeded",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The account must be the proposer to remove it"
                      ]
                    },
                    {
                      "name": "AlreadyProposed",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "An identical proposal exists in storage "
                      ]
                    },
                    {
                      "name": "AlreadySigned",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "The proposal was already signed by the user"
                      ]
                    },
                    {
                      "name": "PendingProposalRequired",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The proposal is already finalized or broadcasted"
                      ]
                    },
                    {
                      "name": "NotEnoughSignatures",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The proposal signatures need to surpass the vault's threshold "
                      ]
                    },
                    {
                      "name": "InvalidProposal",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The proposal has structural failures"
                      ]
                    },
                    {
                      "name": "InvalidVault",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "This vault cant take proposals due to structural failures"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 381,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  1,
                  1
                ]
              },
              "docs": []
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 383,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 384,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  0,
                  1,
                  1
                ]
              },
              "docs": []
            }
          },
          {
            "id": 385,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 386,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  1,
                  1,
                  1
                ]
              },
              "docs": []
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "pallet_rbac",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoneValue",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Error names should be descriptive."
                      ]
                    },
                    {
                      "name": "ScopeNotFound",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "The specified scope doesn't exists"
                      ]
                    },
                    {
                      "name": "ScopeAlreadyExists",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "The scope is already linked with the pallet"
                      ]
                    },
                    {
                      "name": "RoleNotFound",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "The specified role doesn't exist or it hasn't been set to the user"
                      ]
                    },
                    {
                      "name": "PermissionNotFound",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "The permission doesn't exist in the pallet"
                      ]
                    },
                    {
                      "name": "UserNotFound",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "The specified user hasn't been asigned to this scope"
                      ]
                    },
                    {
                      "name": "DuplicateRole",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The provided role list must have unique elements"
                      ]
                    },
                    {
                      "name": "DuplicatePermission",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The provided permission list must have unique elements"
                      ]
                    },
                    {
                      "name": "UserAlreadyHasRole",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "The user has that role asigned in that scope"
                      ]
                    },
                    {
                      "name": "RoleAlreadyLinkedToPallet",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "The role is already linked in the pallet"
                      ]
                    },
                    {
                      "name": "RoleNotLinkedToPallet",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "The role exists but it hasn't been linked to the pallet"
                      ]
                    },
                    {
                      "name": "PermissionAlreadyLinkedToRole",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "The permission is already linked to that role in that scope"
                      ]
                    },
                    {
                      "name": "PermissionNotLinkedToRole",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The permission wasn't found in the roles capabilities"
                      ]
                    },
                    {
                      "name": "UserHasNoRoles",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "The user doesn't have any roles in this pallet"
                      ]
                    },
                    {
                      "name": "RoleHasNoUsers",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "The role doesn't have any users assigned to it"
                      ]
                    },
                    {
                      "name": "ExceedPalletNameMaxLen",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "The pallet name is too long"
                      ]
                    },
                    {
                      "name": "ExceedMaxScopesPerPallet",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "The pallet has too many scopes"
                      ]
                    },
                    {
                      "name": "ExceedMaxRolesPerPallet",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "The pallet cannot have more roles"
                      ]
                    },
                    {
                      "name": "ExceedMaxPermissionsPerRole",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "The specified role cannot have more permission in this scope"
                      ]
                    },
                    {
                      "name": "ExceedMaxRolesPerUser",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "The user cannot have more roles in this scope"
                      ]
                    },
                    {
                      "name": "ExceedMaxUsersPerRole",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "This role cannot have assigned to more users in this scope"
                      ]
                    },
                    {
                      "name": "ExceedRoleMaxLen",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "The role string is too long"
                      ]
                    },
                    {
                      "name": "ExceedPermissionMaxLen",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "The permission string is too long"
                      ]
                    },
                    {
                      "name": "NotAuthorized",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "The user does not have the specified role "
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 217,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 217,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 71
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 217,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "pallet_confidential_docs",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CIDNoneValue",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "Empty CID"
                      ]
                    },
                    {
                      "name": "DocNameTooShort",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Document Name is too short"
                      ]
                    },
                    {
                      "name": "DocDescTooShort",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Document Desc is too short"
                      ]
                    },
                    {
                      "name": "StorageOverflow",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Errors should have helpful documentation associated with them."
                      ]
                    },
                    {
                      "name": "NotOwnerOfUserId",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "Origin is not the owner of the user id"
                      ]
                    },
                    {
                      "name": "NotOwnerOfVault",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Origin is not the owner of the vault"
                      ]
                    },
                    {
                      "name": "UserAlreadyHasVault",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "The user already has a vault"
                      ]
                    },
                    {
                      "name": "AccountAlreadyHasPublicKey",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "The user already has a public key"
                      ]
                    },
                    {
                      "name": "NotDocOwner",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "User is not document owner"
                      ]
                    },
                    {
                      "name": "NotDocSharee",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "User is not document whom with the document was shared"
                      ]
                    },
                    {
                      "name": "CIDNotFound",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "CID not found"
                      ]
                    },
                    {
                      "name": "DocNotFound",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Document not found"
                      ]
                    },
                    {
                      "name": "DocAlreadyShared",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "The document has already been shared"
                      ]
                    },
                    {
                      "name": "DocSharedWithSelf",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Shared with self"
                      ]
                    },
                    {
                      "name": "AccountHasNoPublicKey",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Account has no public key"
                      ]
                    },
                    {
                      "name": "ExceedMaxOwnedDocs",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Max owned documents has been exceeded"
                      ]
                    },
                    {
                      "name": "ExceedMaxSharedToDocs",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "Max documents shared with the \"to\" account has been exceeded"
                      ]
                    },
                    {
                      "name": "ExceedMaxSharedFromDocs",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "Max documents shared with the \"from\" account has been exceeded"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "UserData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 71,
                      "typeName": "FieldName",
                      "docs": []
                    },
                    {
                      "name": "role",
                      "type": 249,
                      "typeName": "ProxyRole",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 71,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "date_registered",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "email",
                      "type": 71,
                      "typeName": "FieldName",
                      "docs": []
                    },
                    {
                      "name": "documents",
                      "type": 252,
                      "typeName": "Option<Documents<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 394,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "ProjectData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "builder",
                      "type": 395,
                      "typeName": "Option<BoundedVec<T::AccountId, T::MaxBuildersPerProject>>",
                      "docs": []
                    },
                    {
                      "name": "investor",
                      "type": 397,
                      "typeName": "Option<BoundedVec<T::AccountId, T::MaxInvestorsPerProject>>",
                      "docs": []
                    },
                    {
                      "name": "issuer",
                      "type": 399,
                      "typeName": "Option<BoundedVec<T::AccountId, T::MaxIssuersPerProject>>",
                      "docs": []
                    },
                    {
                      "name": "regional_center",
                      "type": 401,
                      "typeName": "Option<BoundedVec<T::AccountId, T::MaxRegionalCenterPerProject>>",
                      "docs": []
                    },
                    {
                      "name": "title",
                      "type": 71,
                      "typeName": "FieldName",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 254,
                      "typeName": "FieldDescription",
                      "docs": []
                    },
                    {
                      "name": "image",
                      "type": 71,
                      "typeName": "CID",
                      "docs": []
                    },
                    {
                      "name": "address",
                      "type": 71,
                      "typeName": "FieldName",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 403,
                      "typeName": "ProjectStatus",
                      "docs": []
                    },
                    {
                      "name": "inflation_rate",
                      "type": 58,
                      "typeName": "Option<u32>",
                      "docs": []
                    },
                    {
                      "name": "creation_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "completion_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "registration_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "updated_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 396
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 396,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 396,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 398
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 398,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 400
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 400,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 400,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 402
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 402,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 402,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 403,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "ProjectStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Started",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Completed",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 53,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "ExpenditureData"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "project_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "name",
                      "type": 71,
                      "typeName": "FieldName",
                      "docs": []
                    },
                    {
                      "name": "expenditure_type",
                      "type": 258,
                      "typeName": "ExpenditureType",
                      "docs": []
                    },
                    {
                      "name": "expenditure_amount",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "naics_code",
                      "type": 407,
                      "typeName": "Option<FieldDescription>",
                      "docs": []
                    },
                    {
                      "name": "jobs_multiplier",
                      "type": 58,
                      "typeName": "Option<u32>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 254
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "name": null,
                          "type": 254,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "DrawdownData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "project_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "drawdown_number",
                      "type": 4,
                      "typeName": "u32",
                      "docs": []
                    },
                    {
                      "name": "drawdown_type",
                      "type": 410,
                      "typeName": "DrawdownType",
                      "docs": []
                    },
                    {
                      "name": "total_amount",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 411,
                      "typeName": "DrawdownStatus",
                      "docs": []
                    },
                    {
                      "name": "documents",
                      "type": 252,
                      "typeName": "Option<Documents<T>>",
                      "docs": []
                    },
                    {
                      "name": "description",
                      "type": 407,
                      "typeName": "Option<FieldDescription>",
                      "docs": []
                    },
                    {
                      "name": "feedback",
                      "type": 407,
                      "typeName": "Option<FieldDescription>",
                      "docs": []
                    },
                    {
                      "name": "created_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "close_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "DrawdownType"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EB5",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "ConstructionLoan",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "DeveloperEquity",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "DrawdownStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Draft",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Submitted",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Approved",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Rejected",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 412,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "TransactionData"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "project_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "drawdown_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "expenditure_id",
                      "type": 1,
                      "typeName": "[u8; 32]",
                      "docs": []
                    },
                    {
                      "name": "created_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "updated_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "closed_date",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "feedback",
                      "type": 407,
                      "typeName": "Option<FieldDescription>",
                      "docs": []
                    },
                    {
                      "name": "amount",
                      "type": 8,
                      "typeName": "u64",
                      "docs": []
                    },
                    {
                      "name": "status",
                      "type": 414,
                      "typeName": "TransactionStatus",
                      "docs": []
                    },
                    {
                      "name": "documents",
                      "type": 252,
                      "typeName": "Option<Documents<T>>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "pallet_fund_admin",
                "types",
                "TransactionStatus"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Draft",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Submitted",
                      "fields": [],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Approved",
                      "fields": [],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Rejected",
                      "fields": [],
                      "index": 3,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 415,
            "type": {
              "path": [
                "sp_runtime",
                "bounded",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 1
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 350,
                      "typeName": "Vec<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "pallet_fund_admin",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoGlobalScopeValueWasFound",
                      "fields": [],
                      "index": 0,
                      "docs": [
                        "No value was found for the global scope"
                      ]
                    },
                    {
                      "name": "ProjectIdAlreadyInUse",
                      "fields": [],
                      "index": 1,
                      "docs": [
                        "Project ID is already in use"
                      ]
                    },
                    {
                      "name": "TimestampError",
                      "fields": [],
                      "index": 2,
                      "docs": [
                        "Timestamp was not genereated correctly"
                      ]
                    },
                    {
                      "name": "CompletionDateMustBeLater",
                      "fields": [],
                      "index": 3,
                      "docs": [
                        "Completion date must be later than creation date"
                      ]
                    },
                    {
                      "name": "UserAlreadyRegistered",
                      "fields": [],
                      "index": 4,
                      "docs": [
                        "User is already registered in the site"
                      ]
                    },
                    {
                      "name": "ProjectNotFound",
                      "fields": [],
                      "index": 5,
                      "docs": [
                        "Project was not found"
                      ]
                    },
                    {
                      "name": "ProjectIsAlreadyCompleted",
                      "fields": [],
                      "index": 6,
                      "docs": [
                        "Project is not active anymore"
                      ]
                    },
                    {
                      "name": "CannotDeleteCompletedProject",
                      "fields": [],
                      "index": 7,
                      "docs": [
                        "Can not delete a completed project"
                      ]
                    },
                    {
                      "name": "UserNotRegistered",
                      "fields": [],
                      "index": 8,
                      "docs": [
                        "User is not registered"
                      ]
                    },
                    {
                      "name": "UserAlreadyAssignedToProject",
                      "fields": [],
                      "index": 9,
                      "docs": [
                        "User has been already added to the project"
                      ]
                    },
                    {
                      "name": "MaxUsersPerProjectReached",
                      "fields": [],
                      "index": 10,
                      "docs": [
                        "Max number of users per project reached"
                      ]
                    },
                    {
                      "name": "MaxProjectsPerUserReached",
                      "fields": [],
                      "index": 11,
                      "docs": [
                        "Max number of projects per user reached"
                      ]
                    },
                    {
                      "name": "UserNotAssignedToProject",
                      "fields": [],
                      "index": 12,
                      "docs": [
                        "User is not assigned to the project"
                      ]
                    },
                    {
                      "name": "CannotRegisterAdminRole",
                      "fields": [],
                      "index": 13,
                      "docs": [
                        "Can not register administrator role "
                      ]
                    },
                    {
                      "name": "MaxBuildersPerProjectReached",
                      "fields": [],
                      "index": 14,
                      "docs": [
                        "Max number of builders per project reached"
                      ]
                    },
                    {
                      "name": "MaxInvestorsPerProjectReached",
                      "fields": [],
                      "index": 15,
                      "docs": [
                        "Max number of investors per project reached"
                      ]
                    },
                    {
                      "name": "MaxIssuersPerProjectReached",
                      "fields": [],
                      "index": 16,
                      "docs": [
                        "Max number of issuers per project reached"
                      ]
                    },
                    {
                      "name": "MaxRegionalCenterPerProjectReached",
                      "fields": [],
                      "index": 17,
                      "docs": [
                        "Max number of regional centers per project reached"
                      ]
                    },
                    {
                      "name": "CannotRemoveAdminRole",
                      "fields": [],
                      "index": 18,
                      "docs": [
                        "Can not remove administrator role"
                      ]
                    },
                    {
                      "name": "CannotAddAdminRole",
                      "fields": [],
                      "index": 19,
                      "docs": [
                        "Can not add admin role at user project assignment"
                      ]
                    },
                    {
                      "name": "UserCannotHaveMoreThanOneRole",
                      "fields": [],
                      "index": 20,
                      "docs": [
                        "User can not have more than one role at the same time"
                      ]
                    },
                    {
                      "name": "ExpenditureNotFound",
                      "fields": [],
                      "index": 21,
                      "docs": [
                        "Expenditure not found"
                      ]
                    },
                    {
                      "name": "ExpenditureAlreadyExists",
                      "fields": [],
                      "index": 22,
                      "docs": [
                        "Expenditure already exist"
                      ]
                    },
                    {
                      "name": "MaxExpendituresPerProjectReached",
                      "fields": [],
                      "index": 23,
                      "docs": [
                        "Max number of expenditures per project reached"
                      ]
                    },
                    {
                      "name": "EmptyExpenditureName",
                      "fields": [],
                      "index": 24,
                      "docs": [
                        "Field name can not be empty"
                      ]
                    },
                    {
                      "name": "ExpenditureDoesNotBelongToProject",
                      "fields": [],
                      "index": 25,
                      "docs": [
                        "Expenditure does not belong to the project"
                      ]
                    },
                    {
                      "name": "DrawdownNotFound",
                      "fields": [],
                      "index": 26,
                      "docs": [
                        "Drowdown id is not found"
                      ]
                    },
                    {
                      "name": "InvalidAmount",
                      "fields": [],
                      "index": 27,
                      "docs": [
                        "Invalid amount"
                      ]
                    },
                    {
                      "name": "DocumentsIsEmpty",
                      "fields": [],
                      "index": 28,
                      "docs": [
                        "Documents field is empty"
                      ]
                    },
                    {
                      "name": "TransactionNotFound",
                      "fields": [],
                      "index": 29,
                      "docs": [
                        "Transaction id is not found"
                      ]
                    },
                    {
                      "name": "TransactionAlreadyExists",
                      "fields": [],
                      "index": 30,
                      "docs": [
                        "Transaction already exist"
                      ]
                    },
                    {
                      "name": "MaxTransactionsPerDrawdownReached",
                      "fields": [],
                      "index": 31,
                      "docs": [
                        "Max number of transactions per drawdown reached"
                      ]
                    },
                    {
                      "name": "DrawdownAlreadyExists",
                      "fields": [],
                      "index": 32,
                      "docs": [
                        "Drawdown already exist"
                      ]
                    },
                    {
                      "name": "MaxDrawdownsPerProjectReached",
                      "fields": [],
                      "index": 33,
                      "docs": [
                        "Max number of drawdowns per project reached"
                      ]
                    },
                    {
                      "name": "CannotEditDrawdown",
                      "fields": [],
                      "index": 34,
                      "docs": [
                        "Can not modify a completed drawdown"
                      ]
                    },
                    {
                      "name": "CannotEditTransaction",
                      "fields": [],
                      "index": 35,
                      "docs": [
                        "Can not modify a transaction at this moment"
                      ]
                    },
                    {
                      "name": "DrawdownIsAlreadyCompleted",
                      "fields": [],
                      "index": 36,
                      "docs": [
                        "Drawdown is already completed"
                      ]
                    },
                    {
                      "name": "TransactionIsAlreadyCompleted",
                      "fields": [],
                      "index": 37,
                      "docs": [
                        "Transaction is already completed"
                      ]
                    },
                    {
                      "name": "UserDoesNotHaveRole",
                      "fields": [],
                      "index": 38,
                      "docs": [
                        "User does not have the specified role"
                      ]
                    },
                    {
                      "name": "EmptyTransactions",
                      "fields": [],
                      "index": 39,
                      "docs": [
                        "Transactions vector is empty"
                      ]
                    },
                    {
                      "name": "TransactionIdNotFound",
                      "fields": [],
                      "index": 40,
                      "docs": [
                        "Transaction ID was not found in do_execute_transaction"
                      ]
                    },
                    {
                      "name": "DrawdownHasNoTransactions",
                      "fields": [],
                      "index": 41,
                      "docs": [
                        "Drawdown can not be submitted if does not has any transactions"
                      ]
                    },
                    {
                      "name": "CannotSubmitTransaction",
                      "fields": [],
                      "index": 42,
                      "docs": [
                        "Cannot submit transaction"
                      ]
                    },
                    {
                      "name": "DrawdownIsNotInSubmittedStatus",
                      "fields": [],
                      "index": 43,
                      "docs": [
                        "Drawdown can not be approved if is not in submitted status"
                      ]
                    },
                    {
                      "name": "TransactionIsNotInSubmittedStatus",
                      "fields": [],
                      "index": 44,
                      "docs": [
                        "Transactions is not in submitted status"
                      ]
                    },
                    {
                      "name": "EmptyExpenditures",
                      "fields": [],
                      "index": 45,
                      "docs": [
                        "Array of expenditures is empty"
                      ]
                    },
                    {
                      "name": "ExpenditureNameRequired",
                      "fields": [],
                      "index": 46,
                      "docs": [
                        "Expenditure name is required"
                      ]
                    },
                    {
                      "name": "ExpenditureTypeRequired",
                      "fields": [],
                      "index": 47,
                      "docs": [
                        "Expenditure type is required"
                      ]
                    },
                    {
                      "name": "ExpenditureAmountRequired",
                      "fields": [],
                      "index": 48,
                      "docs": [
                        "Expenditure amount is required"
                      ]
                    },
                    {
                      "name": "ExpenditureIdRequired",
                      "fields": [],
                      "index": 49,
                      "docs": [
                        "Expenditure id is required"
                      ]
                    },
                    {
                      "name": "UserNameRequired",
                      "fields": [],
                      "index": 50,
                      "docs": [
                        "User name is required"
                      ]
                    },
                    {
                      "name": "UserRoleRequired",
                      "fields": [],
                      "index": 51,
                      "docs": [
                        "User role is required"
                      ]
                    },
                    {
                      "name": "AmountRequired",
                      "fields": [],
                      "index": 52,
                      "docs": [
                        "Amount is required"
                      ]
                    },
                    {
                      "name": "UserHasAssignedProjects",
                      "fields": [],
                      "index": 53,
                      "docs": [
                        "Can not delete a user if the user is assigned to a project"
                      ]
                    },
                    {
                      "name": "NoTransactionsToSubmit",
                      "fields": [],
                      "index": 54,
                      "docs": [
                        "Can not send a drawdown to submitted status if it has no transactions"
                      ]
                    },
                    {
                      "name": "BulkUploadDescriptionRequired",
                      "fields": [],
                      "index": 55,
                      "docs": [
                        "Bulk upload description is required"
                      ]
                    },
                    {
                      "name": "AdministratorsCannotDeleteThemselves",
                      "fields": [],
                      "index": 56,
                      "docs": [
                        "Administrator can not delete themselves"
                      ]
                    },
                    {
                      "name": "NoFeedbackProvidedForBulkUpload",
                      "fields": [],
                      "index": 57,
                      "docs": [
                        "No feedback was provided for bulk upload"
                      ]
                    },
                    {
                      "name": "EB5MissingFeedback",
                      "fields": [],
                      "index": 58,
                      "docs": [
                        "NO feedback for EN5 drawdown was provided"
                      ]
                    },
                    {
                      "name": "InflationRateMissingProjectIds",
                      "fields": [],
                      "index": 59,
                      "docs": [
                        "Inflation rate extrinsic is missing an array of project ids"
                      ]
                    },
                    {
                      "name": "InflationRateRequired",
                      "fields": [],
                      "index": 60,
                      "docs": [
                        "Inflation rate was not provided"
                      ]
                    },
                    {
                      "name": "DrawdownTypeNotSupportedForBulkUpload",
                      "fields": [],
                      "index": 61,
                      "docs": [
                        "Bulkupload drawdowns are only allowed for Construction Loan & Developer Equity"
                      ]
                    },
                    {
                      "name": "UserHasAssignedProjectsCannotUpdateRole",
                      "fields": [],
                      "index": 62,
                      "docs": [
                        "Cannot edit user role if the user is assigned to a project"
                      ]
                    },
                    {
                      "name": "UserHasAssignedProjectsCannotDelete",
                      "fields": [],
                      "index": 63,
                      "docs": [
                        "Cannot delete user if the user is assigned to a project"
                      ]
                    },
                    {
                      "name": "DrawdownStatusNotSupportedForBulkUpload",
                      "fields": [],
                      "index": 64,
                      "docs": [
                        "Cannot send a bulkupload drawdown if the drawdown status isn't in draft or rejected"
                      ]
                    },
                    {
                      "name": "UserIsNotAnInvestor",
                      "fields": [],
                      "index": 65,
                      "docs": [
                        "Only investors can update/edit their documents"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 137
                },
                {
                  "name": "Call",
                  "type": 145
                },
                {
                  "name": "Signature",
                  "type": 234
                },
                {
                  "name": "Extra",
                  "type": 418
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 10,
                      "typeName": null,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 418,
            "type": {
              "path": [],
              "params": [],
              "def": {
                "tuple": [
                  419,
                  420,
                  421,
                  422,
                  423,
                  425,
                  426,
                  427
                ]
              },
              "docs": []
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 420,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 421,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 424,
                      "typeName": "Era",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 424,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "params": [],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "fields": [],
                      "index": 0,
                      "docs": []
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 1,
                      "docs": []
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 2,
                      "docs": []
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 3,
                      "docs": []
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 4,
                      "docs": []
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 5,
                      "docs": []
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 6,
                      "docs": []
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 7,
                      "docs": []
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 8,
                      "docs": []
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 9,
                      "docs": []
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 10,
                      "docs": []
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 11,
                      "docs": []
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 12,
                      "docs": []
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 13,
                      "docs": []
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 14,
                      "docs": []
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 15,
                      "docs": []
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 16,
                      "docs": []
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 17,
                      "docs": []
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 18,
                      "docs": []
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 19,
                      "docs": []
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 20,
                      "docs": []
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 21,
                      "docs": []
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 22,
                      "docs": []
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 23,
                      "docs": []
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 24,
                      "docs": []
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 25,
                      "docs": []
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 26,
                      "docs": []
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 27,
                      "docs": []
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 28,
                      "docs": []
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 29,
                      "docs": []
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 30,
                      "docs": []
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 31,
                      "docs": []
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 32,
                      "docs": []
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 33,
                      "docs": []
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 34,
                      "docs": []
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 35,
                      "docs": []
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 36,
                      "docs": []
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 37,
                      "docs": []
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 38,
                      "docs": []
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 39,
                      "docs": []
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 40,
                      "docs": []
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 41,
                      "docs": []
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 42,
                      "docs": []
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 43,
                      "docs": []
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 44,
                      "docs": []
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 45,
                      "docs": []
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 46,
                      "docs": []
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 47,
                      "docs": []
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 48,
                      "docs": []
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 49,
                      "docs": []
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 50,
                      "docs": []
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 51,
                      "docs": []
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 52,
                      "docs": []
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 53,
                      "docs": []
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 54,
                      "docs": []
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 55,
                      "docs": []
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 56,
                      "docs": []
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 57,
                      "docs": []
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 58,
                      "docs": []
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 59,
                      "docs": []
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 60,
                      "docs": []
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 61,
                      "docs": []
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 62,
                      "docs": []
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 63,
                      "docs": []
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 64,
                      "docs": []
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 65,
                      "docs": []
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 66,
                      "docs": []
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 67,
                      "docs": []
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 68,
                      "docs": []
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 69,
                      "docs": []
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 70,
                      "docs": []
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 71,
                      "docs": []
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 72,
                      "docs": []
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 73,
                      "docs": []
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 74,
                      "docs": []
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 75,
                      "docs": []
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 76,
                      "docs": []
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 77,
                      "docs": []
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 78,
                      "docs": []
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 79,
                      "docs": []
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 80,
                      "docs": []
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 81,
                      "docs": []
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 82,
                      "docs": []
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 83,
                      "docs": []
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 84,
                      "docs": []
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 85,
                      "docs": []
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 86,
                      "docs": []
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 87,
                      "docs": []
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 88,
                      "docs": []
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 89,
                      "docs": []
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 90,
                      "docs": []
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 91,
                      "docs": []
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 92,
                      "docs": []
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 93,
                      "docs": []
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 94,
                      "docs": []
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 95,
                      "docs": []
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 96,
                      "docs": []
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 97,
                      "docs": []
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 98,
                      "docs": []
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 99,
                      "docs": []
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 100,
                      "docs": []
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 101,
                      "docs": []
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 102,
                      "docs": []
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 103,
                      "docs": []
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 104,
                      "docs": []
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 105,
                      "docs": []
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 106,
                      "docs": []
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 107,
                      "docs": []
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 108,
                      "docs": []
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 109,
                      "docs": []
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 110,
                      "docs": []
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 111,
                      "docs": []
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 112,
                      "docs": []
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 113,
                      "docs": []
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 114,
                      "docs": []
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 115,
                      "docs": []
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 116,
                      "docs": []
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 117,
                      "docs": []
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 118,
                      "docs": []
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 119,
                      "docs": []
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 120,
                      "docs": []
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 121,
                      "docs": []
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 122,
                      "docs": []
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 123,
                      "docs": []
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 124,
                      "docs": []
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 125,
                      "docs": []
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 126,
                      "docs": []
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 127,
                      "docs": []
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 128,
                      "docs": []
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 129,
                      "docs": []
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 130,
                      "docs": []
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 131,
                      "docs": []
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 132,
                      "docs": []
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 133,
                      "docs": []
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 134,
                      "docs": []
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 135,
                      "docs": []
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 136,
                      "docs": []
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 137,
                      "docs": []
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 138,
                      "docs": []
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 139,
                      "docs": []
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 140,
                      "docs": []
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 141,
                      "docs": []
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 142,
                      "docs": []
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 143,
                      "docs": []
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 144,
                      "docs": []
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 145,
                      "docs": []
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 146,
                      "docs": []
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 147,
                      "docs": []
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 148,
                      "docs": []
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 149,
                      "docs": []
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 150,
                      "docs": []
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 151,
                      "docs": []
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 152,
                      "docs": []
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 153,
                      "docs": []
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 154,
                      "docs": []
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 155,
                      "docs": []
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 156,
                      "docs": []
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 157,
                      "docs": []
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 158,
                      "docs": []
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 159,
                      "docs": []
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 160,
                      "docs": []
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 161,
                      "docs": []
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 162,
                      "docs": []
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 163,
                      "docs": []
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 164,
                      "docs": []
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 165,
                      "docs": []
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 166,
                      "docs": []
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 167,
                      "docs": []
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 168,
                      "docs": []
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 169,
                      "docs": []
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 170,
                      "docs": []
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 171,
                      "docs": []
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 172,
                      "docs": []
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 173,
                      "docs": []
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 174,
                      "docs": []
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 175,
                      "docs": []
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 176,
                      "docs": []
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 177,
                      "docs": []
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 178,
                      "docs": []
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 179,
                      "docs": []
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 180,
                      "docs": []
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 181,
                      "docs": []
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 182,
                      "docs": []
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 183,
                      "docs": []
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 184,
                      "docs": []
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 185,
                      "docs": []
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 186,
                      "docs": []
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 187,
                      "docs": []
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 188,
                      "docs": []
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 189,
                      "docs": []
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 190,
                      "docs": []
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 191,
                      "docs": []
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 192,
                      "docs": []
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 193,
                      "docs": []
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 194,
                      "docs": []
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 195,
                      "docs": []
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 196,
                      "docs": []
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 197,
                      "docs": []
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 198,
                      "docs": []
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 199,
                      "docs": []
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 200,
                      "docs": []
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 201,
                      "docs": []
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 202,
                      "docs": []
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 203,
                      "docs": []
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 204,
                      "docs": []
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 205,
                      "docs": []
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 206,
                      "docs": []
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 207,
                      "docs": []
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 208,
                      "docs": []
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 209,
                      "docs": []
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 210,
                      "docs": []
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 211,
                      "docs": []
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 212,
                      "docs": []
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 213,
                      "docs": []
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 214,
                      "docs": []
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 215,
                      "docs": []
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 216,
                      "docs": []
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 217,
                      "docs": []
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 218,
                      "docs": []
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 219,
                      "docs": []
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 220,
                      "docs": []
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 221,
                      "docs": []
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 222,
                      "docs": []
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 223,
                      "docs": []
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 224,
                      "docs": []
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 225,
                      "docs": []
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 226,
                      "docs": []
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 227,
                      "docs": []
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 228,
                      "docs": []
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 229,
                      "docs": []
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 230,
                      "docs": []
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 231,
                      "docs": []
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 232,
                      "docs": []
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 233,
                      "docs": []
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 234,
                      "docs": []
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 235,
                      "docs": []
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 236,
                      "docs": []
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 237,
                      "docs": []
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 238,
                      "docs": []
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 239,
                      "docs": []
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 240,
                      "docs": []
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 241,
                      "docs": []
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 242,
                      "docs": []
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 243,
                      "docs": []
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 244,
                      "docs": []
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 245,
                      "docs": []
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 246,
                      "docs": []
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 247,
                      "docs": []
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 248,
                      "docs": []
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 249,
                      "docs": []
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 250,
                      "docs": []
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 251,
                      "docs": []
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 252,
                      "docs": []
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 253,
                      "docs": []
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 254,
                      "docs": []
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "name": null,
                          "type": 2,
                          "typeName": null,
                          "docs": []
                        }
                      ],
                      "index": 255,
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 425,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 82,
                      "typeName": "T::Index",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 426,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          },
          {
            "id": 427,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": null,
                      "type": 140,
                      "typeName": "BalanceOf<T>",
                      "docs": []
                    }
                  ]
                }
              },
              "docs": []
            }
          },
          {
            "id": 428,
            "type": {
              "path": [
                "hashed_runtime",
                "Runtime"
              ],
              "params": [],
              "def": {
                "composite": {
                  "fields": []
                }
              },
              "docs": []
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 15
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 9,
                    "value": 79
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 81
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 45
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 45
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 77
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "type": 84
          },
          "events": {
            "type": 18
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 89,
              "value": "0xe0d1a93e0100000000204aa9d101000090cd2405000000000170fae4a82e010000010098f73e5d01000001000000000000000090cd2405000000000170823713a30100000100204aa9d1010000010088526a7400000090cd240500000000000000",
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "type": 93,
              "value": "0x00003c000000500000005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "type": 95,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "type": 96,
              "value": "0x186861736865641c68617368656478010000007f0000000100000028df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000dd718d5cc53262d401000000ab3c0572291feb8b01000000ed99c5acb25eedf503000000bc9d89904f5b923f0100000037c8bb1350a9a2a8010000000100000001",
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "type": 101,
              "value": "0x2a00",
              "docs": [
                " The designated SS85 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "errors": {
            "type": 102
          },
          "index": 0
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": 103
                },
                "fallback": "0x00",
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 1
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 45
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "type": 104
          },
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "errors": null,
          "index": 2
        },
        {
          "name": "Aura",
          "storage": {
            "prefix": "Aura",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 106
                },
                "fallback": "0x00",
                "docs": [
                  " The current authority set."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 110
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The current slot of this block.",
                  "",
                  " This will be set in `on_initialize`."
                ]
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [],
          "errors": null,
          "index": 3
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": 111
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": 112
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": 80
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "type": 114
          },
          "events": {
            "type": 27
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " Max Authorities in use"
              ]
            }
          ],
          "errors": {
            "type": 127
          },
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 128
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 132
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 135
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": {
            "type": 136
          },
          "events": {
            "type": 32
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0xf4010000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "type": 4,
              "value": "0x00000000",
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "errors": {
            "type": 141
          },
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 142
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 143
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": {
            "type": 34
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "type": 2,
              "value": "0x05",
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "errors": null,
          "index": 6
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "type": 144
          },
          "events": {
            "type": 35
          },
          "constants": [],
          "errors": {
            "type": 281
          },
          "index": 7
        },
        {
          "name": "TemplateModule",
          "storage": {
            "prefix": "TemplateModule",
            "items": [
              {
                "name": "Something",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "MyBytesVal",
                "modifier": "Default",
                "type": {
                  "plain": 148
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 146
          },
          "events": {
            "type": 39
          },
          "constants": [],
          "errors": {
            "type": 282
          },
          "index": 8
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 283
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Information that is pertinent to identify the entity behind an account.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 186
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The super-identity of an alternative \"sub\" identity together with its name, within that",
                  " context. If the account is not some other account's sub-identity, then just `None`."
                ]
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 287
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": [
                  " Alternative \"sub\" identities of this account.",
                  "",
                  " The first item is the deposit, the second is a vector of the accounts.",
                  "",
                  " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                ]
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 289
                },
                "fallback": "0x00",
                "docs": [
                  " The set of registrars. Not expected to get very big as can only be added through a",
                  " special origin (likely a council motion).",
                  "",
                  " The index into this can be cast to `RegistrarIndex` to get a valid value."
                ]
              }
            ]
          },
          "calls": {
            "type": 149
          },
          "events": {
            "type": 40
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x084cd2c2070000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered identity"
              ]
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x0293b4f0010000000000000000000000",
              "docs": [
                " The amount held on deposit per additional field for a registered identity."
              ]
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x68425d8d010000000000000000000000",
              "docs": [
                " The amount held on deposit for a registered subaccount. This should account for the fact",
                " that one storage item's value will increase by the size of an account ID, and there will",
                " be another trie item whose value is the size of an account ID plus 32 bytes."
              ]
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of sub-accounts allowed per identified account."
              ]
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                " required to access an identity, but can be pretty high."
              ]
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": [
                " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                " of, e.g., updating judgements."
              ]
            }
          ],
          "errors": {
            "type": 293
          },
          "index": 9
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 294
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of recoverable accounts and their recovery configuration."
                ]
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 296,
                    "value": 297
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Active recovery attempts.",
                  "",
                  " First account is the account to be recovered, and the second account",
                  " is the user trying to recover the account."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The list of allowed proxy accounts.",
                  "",
                  " Map from the user who can access it to the recovered account."
                ]
              }
            ]
          },
          "calls": {
            "type": 190
          },
          "events": {
            "type": 41
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": 6,
              "value": "0x042669e1030000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for creating a recovery configuration.",
                "",
                " This is held for an additional storage item whose value size is",
                " `2 + sizeof(BlockNumber, Balance)` bytes."
              ]
            },
            {
              "name": "FriendDepositFactor",
              "type": 6,
              "value": "0x9a505763000000000000000000000000",
              "docs": [
                " The amount of currency needed per additional user when creating a recovery",
                " configuration.",
                "",
                " This is held for adding `sizeof(AccountId)` bytes more into a pre-existing storage",
                " value."
              ]
            },
            {
              "name": "MaxFriends",
              "type": 4,
              "value": "0x09000000",
              "docs": [
                " The maximum amount of friends allowed in a recovery configuration.",
                "",
                " NOTE: The threshold programmed in this Pallet uses u16, so it does",
                " not really make sense to have a limit here greater than u16::MAX.",
                " But also, that is a lot more than you should probably set this value",
                " to anyway..."
              ]
            },
            {
              "name": "RecoveryDeposit",
              "type": 6,
              "value": "0x042669e1030000000000000000000000",
              "docs": [
                " The base amount of currency needed to reserve for starting a recovery.",
                "",
                " This is primarily held for deterring malicious recovery attempts, and should",
                " have a value large enough that a bad actor would choose not to place this",
                " deposit. It also acts to fund additional storage item whose value size is",
                " `sizeof(BlockNumber, Balance + T * AccountId)` bytes. Where T is a configurable",
                " threshold."
              ]
            }
          ],
          "errors": {
            "type": 298
          },
          "index": 10
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 299
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The lookup from index to account."
                ]
              }
            ]
          },
          "calls": {
            "type": 191
          },
          "events": {
            "type": 42
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The deposit needed for reserving an index."
              ]
            }
          ],
          "errors": {
            "type": 300
          },
          "index": 11
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 301
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 302
                },
                "fallback": "0x00",
                "docs": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": {
            "type": 192
          },
          "events": {
            "type": 43
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 303,
              "value": "0x50c30000",
              "docs": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x1098a4850f0000000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "ProposalBondMaximum",
              "type": 202,
              "value": "0x0120b3251a080300000000000000000000",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x80510100",
              "docs": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": 303,
              "value": "0xd0070000",
              "docs": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            },
            {
              "name": "PalletId",
              "type": 304,
              "value": "0x70792f7472737279",
              "docs": [
                " The treasury's pallet id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxApprovals",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " The maximum number of approvals that can wait in the spending queue.",
                "",
                " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
              ]
            }
          ],
          "errors": {
            "type": 305
          },
          "index": 12
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 306
                },
                "fallback": "0x00",
                "docs": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 145
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 9,
                    "value": 307
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 53
                },
                "fallback": "0x00",
                "docs": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The prime member that helps determine the default vote behavior in case of absentations."
                ]
              }
            ]
          },
          "calls": {
            "type": 193
          },
          "events": {
            "type": 44
          },
          "constants": [],
          "errors": {
            "type": 308
          },
          "index": 13
        },
        {
          "name": "Membership",
          "storage": {
            "prefix": "Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 309
                },
                "fallback": "0x00",
                "docs": [
                  " The current membership, stored as an ordered Vec."
                ]
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The current prime member, if one exists."
                ]
              }
            ]
          },
          "calls": {
            "type": 194
          },
          "events": {
            "type": 46
          },
          "constants": [],
          "errors": {
            "type": 310
          },
          "index": 14
        },
        {
          "name": "NodeAuthorization",
          "storage": {
            "prefix": "NodeAuthorization",
            "items": [
              {
                "name": "WellKnownNodes",
                "modifier": "Default",
                "type": {
                  "plain": 311
                },
                "fallback": "0x00",
                "docs": [
                  " The set of well known nodes. This is stored sorted (just by value)."
                ]
              },
              {
                "name": "Owners",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A map that maintains the ownership of each node."
                ]
              },
              {
                "name": "AdditionalConnections",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 311
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The additional adapative connections of each node."
                ]
              }
            ]
          },
          "calls": {
            "type": 195
          },
          "events": {
            "type": 47
          },
          "constants": [
            {
              "name": "MaxWellKnownNodes",
              "type": 4,
              "value": "0x08000000",
              "docs": [
                " The maximum number of well known nodes that are allowed to set"
              ]
            },
            {
              "name": "MaxPeerIdLength",
              "type": 4,
              "value": "0x80000000",
              "docs": [
                " The maximum length in bytes of PeerId"
              ]
            }
          ],
          "errors": {
            "type": 312
          },
          "index": 15
        },
        {
          "name": "Society",
          "storage": {
            "prefix": "Society",
            "items": [
              {
                "name": "Founder",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The first member."
                ]
              },
              {
                "name": "Rules",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": [
                  " A hash of the rules of this society concerning membership. Can only be set once and",
                  " only by the founder."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 313
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of candidates; bidders that are attempting to become members."
                ]
              },
              {
                "name": "SuspendedCandidates",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 316
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended candidates."
                ]
              },
              {
                "name": "Pot",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Amount of our account balance that is specifically for the next round's bid(s)."
                ]
              },
              {
                "name": "Head",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The most primary from the most recently approved members."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 53
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of members, ordered."
                ]
              },
              {
                "name": "SuspendedMembers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 45
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The set of suspended members."
                ]
              },
              {
                "name": "Bids",
                "modifier": "Default",
                "type": {
                  "plain": 313
                },
                "fallback": "0x00",
                "docs": [
                  " The current bids, stored ordered by the value of the bid."
                ]
              },
              {
                "name": "Vouching",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 317
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Members currently vouching or banned from vouching again"
                ]
              },
              {
                "name": "Payouts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 318
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Pending payouts; ordered by block number, with the amount that should be paid out."
                ]
              },
              {
                "name": "Strikes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ongoing number of losing votes cast by the member."
                ]
              },
              {
                "name": "Votes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 296,
                    "value": 320
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Double map from Candidate -> Voter -> (Maybe) Vote."
                ]
              },
              {
                "name": "Defender",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": [
                  " The defending member currently being challenged."
                ]
              },
              {
                "name": "DefenderVotes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 320
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Votes for the defender."
                ]
              },
              {
                "name": "MaxMembers",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " The max number of members for the society at one time."
                ]
              }
            ]
          },
          "calls": {
            "type": 196
          },
          "events": {
            "type": 52
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 304,
              "value": "0x70792f736f636965",
              "docs": [
                " The societies's pallet id"
              ]
            },
            {
              "name": "CandidateDeposit",
              "type": 6,
              "value": "0x084cd2c2070000000000000000000000",
              "docs": [
                " The minimum amount of a deposit required for a bid to be made."
              ]
            },
            {
              "name": "WrongSideDeduction",
              "type": 6,
              "value": "0x68425d8d010000000000000000000000",
              "docs": [
                " The amount of the unpaid reward that gets deducted in the case that either a skeptic",
                " doesn't vote or someone votes in the wrong way."
              ]
            },
            {
              "name": "MaxStrikes",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " The number of times a member may vote the wrong way (or not at all, when they are a",
                " skeptic) before they become suspended."
              ]
            },
            {
              "name": "PeriodSpend",
              "type": 6,
              "value": "0x90d9120d840100000000000000000000",
              "docs": [
                " The amount of incentive paid within each period. Doesn't include VoterTip."
              ]
            },
            {
              "name": "RotationPeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " The number of blocks between candidate/membership rotation periods."
              ]
            },
            {
              "name": "MaxLockDuration",
              "type": 4,
              "value": "0x004eed00",
              "docs": [
                " The maximum duration of the payout lock."
              ]
            },
            {
              "name": "ChallengePeriod",
              "type": 4,
              "value": "0xc0890100",
              "docs": [
                " The number of blocks between membership challenges."
              ]
            },
            {
              "name": "MaxCandidateIntake",
              "type": 4,
              "value": "0x01000000",
              "docs": [
                " The maximum number of candidates that we accept per round."
              ]
            }
          ],
          "errors": {
            "type": 321
          },
          "index": 16
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Bounties",
            "items": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Number of bounty proposals that have been made."
                ]
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 322
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Bounties that have been made."
                ]
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 324
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The description of each bounty."
                ]
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "plain": 302
                },
                "fallback": "0x00",
                "docs": [
                  " Bounty indices that have been approved but not yet funded."
                ]
              }
            ]
          },
          "calls": {
            "type": 198
          },
          "events": {
            "type": 54
          },
          "constants": [
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The amount held on deposit for placing a bounty proposal."
              ]
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": "0x00e10000",
              "docs": [
                " The delay period for which a bounty beneficiary need to wait before claim the payout."
              ]
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": "0x80c61300",
              "docs": [
                " Bounty duration in blocks."
              ]
            },
            {
              "name": "CuratorDepositMultiplier",
              "type": 303,
              "value": "0x20a10700",
              "docs": [
                " The curator deposit is calculated as a percentage of the curator fee.",
                "",
                " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
                " `CuratorDepositMin`."
              ]
            },
            {
              "name": "CuratorDepositMax",
              "type": 202,
              "value": "0x0150f8369c4d0000000000000000000000",
              "docs": [
                " Maximum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "CuratorDepositMin",
              "type": 202,
              "value": "0x0134a1aec6000000000000000000000000",
              "docs": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": "0x68425d8d010000000000000000000000",
              "docs": [
                " Minimum value for a bounty."
              ]
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x55a0fc01000000000000000000000000",
              "docs": [
                " The amount held on deposit per byte within the tip report reason or bounty description."
              ]
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": [
                " Maximum acceptable reason length.",
                "",
                " Benchmarks depend on this value, be sure to update weights file when changing this value"
              ]
            }
          ],
          "errors": {
            "type": 325
          },
          "index": 17
        },
        {
          "name": "Uniques",
          "storage": {
            "prefix": "Uniques",
            "items": [
              {
                "name": "Class",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 326
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of a collection."
                ]
              },
              {
                "name": "OwnershipAcceptance",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The collection, if any, of which an account is willing to take ownership."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 327,
                    "value": 37
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The items held by any given account; set out this way so that items owned by a single",
                  " account can be enumerated."
                ]
              },
              {
                "name": "ClassAccount",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 328,
                    "value": 37
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The collections owned by any given account; set out this way so that collections owned by",
                  " a single account can be enumerated."
                ]
              },
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 329
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The items in existence and their ownership details."
                ]
              },
              {
                "name": "ClassMetadataOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 330
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Metadata of a collection."
                ]
              },
              {
                "name": "InstanceMetadataOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 331
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Metadata of an item."
                ]
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 332,
                    "value": 333
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Attributes of a collection."
                ]
              },
              {
                "name": "ItemPriceOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 334
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Price of an asset instance."
                ]
              },
              {
                "name": "CollectionMaxSupply",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of the number of items a collection might have."
                ]
              }
            ]
          },
          "calls": {
            "type": 199
          },
          "events": {
            "type": 55
          },
          "constants": [
            {
              "name": "CollectionDeposit",
              "type": 6,
              "value": "0x50f8369c4d0000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for collection."
              ]
            },
            {
              "name": "ItemDeposit",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an item."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": 6,
              "value": "0x084cd2c2070000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your item."
              ]
            },
            {
              "name": "AttributeDepositBase",
              "type": 6,
              "value": "0x084cd2c2070000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding an attribute to an item."
              ]
            },
            {
              "name": "DepositPerByte",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes store in metadata,",
                " either \"normal\" metadata or attribute metadata."
              ]
            },
            {
              "name": "StringLimit",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of data stored on-chain."
              ]
            },
            {
              "name": "KeyLimit",
              "type": 4,
              "value": "0x20000000",
              "docs": [
                " The maximum length of an attribute key."
              ]
            },
            {
              "name": "ValueLimit",
              "type": 4,
              "value": "0x00010000",
              "docs": [
                " The maximum length of an attribute value."
              ]
            }
          ],
          "errors": {
            "type": 335
          },
          "index": 18
        },
        {
          "name": "Fruniques",
          "storage": {
            "prefix": "Fruniques",
            "items": [
              {
                "name": "FruniqueCnt",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Keeps track of the number of Kitties in existence."
                ]
              },
              {
                "name": "NextCollection",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": [
                  " Keeps track of the number of collections in existence."
                ]
              },
              {
                "name": "NextFrunique",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " Keeps track of the number of fruniques in existence for a collection."
                ]
              },
              {
                "name": "FruniqueParent",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 206
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of hierarchical information for a frunique."
                ]
              },
              {
                "name": "FruniqueVerified",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 45
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of verified fruniques."
                ]
              },
              {
                "name": "FruniqueChild",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 336
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of hierarchical information for a frunique."
                ]
              }
            ]
          },
          "calls": {
            "type": 203
          },
          "events": {
            "type": 61
          },
          "constants": [
            {
              "name": "ChildMaxLen",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of children a Frunique can have"
              ]
            }
          ],
          "errors": {
            "type": 338
          },
          "index": 19
        },
        {
          "name": "GatedMarketplace",
          "storage": {
            "prefix": "GatedMarketplace",
            "items": [
              {
                "name": "Marketplaces",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 339
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Applications",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 340
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ApplicationsByAccount",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 345,
                    "value": 1
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ApplicantsByMarketplace",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Blake2_128Concat"
                    ],
                    "key": 346,
                    "value": 347
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Custodians",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity"
                    ],
                    "key": 345,
                    "value": 348
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OffersByItem",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 80,
                    "value": 349
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OffersByAccount",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 349
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OffersByMarketplace",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 349
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OffersInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 351
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 209
          },
          "events": {
            "type": 62
          },
          "constants": [
            {
              "name": "MaxAuthsPerMarket",
              "type": 4,
              "value": "0x03000000",
              "docs": []
            },
            {
              "name": "MaxRolesPerAuth",
              "type": 4,
              "value": "0x02000000",
              "docs": []
            },
            {
              "name": "MaxApplicants",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "LabelMaxLen",
              "type": 4,
              "value": "0x20000000",
              "docs": []
            },
            {
              "name": "MaxFeedbackLen",
              "type": 4,
              "value": "0x00010000",
              "docs": []
            },
            {
              "name": "NotesMaxLen",
              "type": 4,
              "value": "0x00010000",
              "docs": []
            },
            {
              "name": "NameMaxLen",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            },
            {
              "name": "MaxFiles",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxApplicationsPerCustodian",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxMarketsPerItem",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxOffersPerMarket",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 355
          },
          "index": 20
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 356
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Details of an asset."
                ]
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 357,
                    "value": 358
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The holdings of a specific account for a specific asset."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 360,
                    "value": 361
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Approved balance transfers. First balance is the amount approved for transfer. Second",
                  " is the amount of `T::Currency` reserved for storing this.",
                  " First key is the asset ID, second key is the owner and third key is the delegate."
                ]
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 4,
                    "value": 362
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": [
                  " Metadata of an asset."
                ]
              }
            ]
          },
          "calls": {
            "type": 219
          },
          "events": {
            "type": 66
          },
          "constants": [
            {
              "name": "AssetDeposit",
              "type": 6,
              "value": "0x50f8369c4d0000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved for an asset."
              ]
            },
            {
              "name": "AssetAccountDeposit",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved for a non-provider asset account to be",
                " maintained."
              ]
            },
            {
              "name": "MetadataDepositBase",
              "type": 6,
              "value": "0x084cd2c2070000000000000000000000",
              "docs": [
                " The basic amount of funds that must be reserved when adding metadata to your asset."
              ]
            },
            {
              "name": "MetadataDepositPerByte",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The additional funds that must be reserved for the number of bytes you store in your",
                " metadata."
              ]
            },
            {
              "name": "ApprovalDeposit",
              "type": 6,
              "value": "0x34a1aec6000000000000000000000000",
              "docs": [
                " The amount of funds that must be reserved when creating a new approval."
              ]
            },
            {
              "name": "StringLimit",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " The maximum length of a name or symbol stored on-chain."
              ]
            }
          ],
          "errors": {
            "type": 363
          },
          "index": 21
        },
        {
          "name": "BitcoinVaults",
          "storage": {
            "prefix": "BitcoinVaults",
            "items": [
              {
                "name": "Xpubs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 222
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Stores hash-xpub pairs"
                ]
              },
              {
                "name": "XpubsByOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 0,
                    "value": 1
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of what accounts own what xpub."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 364
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProposalsByVault",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 371
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Vaults",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 372
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "VaultsBySigner",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 0,
                    "value": 376
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Keeps track of what accounts own what xpub."
                ]
              },
              {
                "name": "BDKServicesURL",
                "modifier": "Default",
                "type": {
                  "plain": 225
                },
                "fallback": "0x6868747470733a2f2f62646b2e6861736865642e73797374656d73",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 221
          },
          "events": {
            "type": 67
          },
          "constants": [
            {
              "name": "XPubLen",
              "type": 4,
              "value": "0xa6000000",
              "docs": []
            },
            {
              "name": "PSBTMaxLen",
              "type": 4,
              "value": "0x00080000",
              "docs": []
            },
            {
              "name": "MaxVaultsPerUser",
              "type": 4,
              "value": "0x0a000000",
              "docs": [
                " It counts both owned vaults and vaults where the user is a cosigner"
              ]
            },
            {
              "name": "MaxCosignersPerVault",
              "type": 4,
              "value": "0x07000000",
              "docs": []
            },
            {
              "name": "VaultDescriptionMaxLen",
              "type": 4,
              "value": "0xc8000000",
              "docs": []
            },
            {
              "name": "OutputDescriptorMaxLen",
              "type": 4,
              "value": "0x00080000",
              "docs": []
            },
            {
              "name": "MaxProposalsPerVault",
              "type": 4,
              "value": "0x05000000",
              "docs": []
            }
          ],
          "errors": {
            "type": 377
          },
          "index": 22
        },
        {
          "name": "RBAC",
          "storage": {
            "prefix": "RBAC",
            "items": [
              {
                "name": "Scopes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 378
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Roles",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 379
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "PalletRoles",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 380
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Permissions",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 381,
                    "value": 382
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "PermissionsByRole",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 381,
                    "value": 383
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "RolesByUser",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Identity",
                      "Identity"
                    ],
                    "key": 384,
                    "value": 385
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UsersByScope",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity",
                      "Identity"
                    ],
                    "key": 386,
                    "value": 387
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 241
          },
          "events": {
            "type": 68
          },
          "constants": [
            {
              "name": "MaxScopesPerPallet",
              "type": 4,
              "value": "0xe8030000",
              "docs": []
            },
            {
              "name": "MaxRolesPerPallet",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "RoleMaxLen",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "PermissionMaxLen",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "MaxPermissionsPerRole",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            },
            {
              "name": "MaxRolesPerUser",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxUsersPerRole",
              "type": 4,
              "value": "0xc4090000",
              "docs": []
            }
          ],
          "errors": {
            "type": 388
          },
          "index": 23
        },
        {
          "name": "ConfidentialDocs",
          "storage": {
            "prefix": "ConfidentialDocs",
            "items": [
              {
                "name": "Vaults",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 1,
                    "value": 70
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "PublicKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 0,
                    "value": 1
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UserIds",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 1
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OwnedDocs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 71,
                    "value": 72
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "OwnedDocsByOwner",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 0,
                    "value": 389
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SharedDocs",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 71,
                    "value": 75
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SharedDocsByTo",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 0,
                    "value": 390
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SharedDocsByFrom",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_256"
                    ],
                    "key": 0,
                    "value": 391
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 242
          },
          "events": {
            "type": 69
          },
          "constants": [
            {
              "name": "MaxOwnedDocs",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of confidential documents that a user can own"
              ]
            },
            {
              "name": "MaxSharedFromDocs",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of confidential documents that a user can share"
              ]
            },
            {
              "name": "MaxSharedToDocs",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum number of confidential documents that can be shared to a user"
              ]
            },
            {
              "name": "DocNameMinLen",
              "type": 4,
              "value": "0x03000000",
              "docs": [
                " Minimum length for a document name"
              ]
            },
            {
              "name": "DocNameMaxLen",
              "type": 4,
              "value": "0x32000000",
              "docs": [
                " Maximum length for a document name"
              ]
            },
            {
              "name": "DocDescMinLen",
              "type": 4,
              "value": "0x05000000",
              "docs": [
                " Minimum length for a document description"
              ]
            },
            {
              "name": "DocDescMaxLen",
              "type": 4,
              "value": "0x64000000",
              "docs": [
                " Maximum length for a document description"
              ]
            }
          ],
          "errors": {
            "type": 392
          },
          "index": 24
        },
        {
          "name": "FundAdmin",
          "storage": {
            "prefix": "FundAdmin",
            "items": [
              {
                "name": "GlobalScope",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "UsersInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 393
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProjectsInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 394
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UsersByProject",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 404
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProjectsByUser",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 405
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ExpendituresInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 406
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ExpendituresByProject",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 408
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DrawdownsInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 409
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DrawdownsByProject",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 412
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "TransactionsInfo",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 1,
                    "value": 413
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "TransactionsByDrawdown",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 381,
                    "value": 415
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 243
          },
          "events": {
            "type": 76
          },
          "constants": [
            {
              "name": "MaxDocuments",
              "type": 4,
              "value": "0x05000000",
              "docs": []
            },
            {
              "name": "MaxProjectsPerUser",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxUserPerProject",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "MaxBuildersPerProject",
              "type": 4,
              "value": "0x01000000",
              "docs": []
            },
            {
              "name": "MaxInvestorsPerProject",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "MaxIssuersPerProject",
              "type": 4,
              "value": "0x01000000",
              "docs": []
            },
            {
              "name": "MaxRegionalCenterPerProject",
              "type": 4,
              "value": "0x01000000",
              "docs": []
            },
            {
              "name": "MaxBoundedVecs",
              "type": 4,
              "value": "0x01000000",
              "docs": []
            },
            {
              "name": "MaxDrawdownsPerProject",
              "type": 4,
              "value": "0xe8030000",
              "docs": []
            },
            {
              "name": "MaxTransactionsPerDrawdown",
              "type": 4,
              "value": "0xf4010000",
              "docs": []
            },
            {
              "name": "MaxRegistrationsAtTime",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "MaxExpendituresPerProject",
              "type": 4,
              "value": "0xe8030000",
              "docs": []
            }
          ],
          "errors": {
            "type": 416
          },
          "index": 25
        }
      ],
      "extrinsic": {
        "type": 417,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckNonZeroSender",
            "type": 419,
            "additionalSigned": 37
          },
          {
            "identifier": "CheckSpecVersion",
            "type": 420,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckTxVersion",
            "type": 421,
            "additionalSigned": 4
          },
          {
            "identifier": "CheckGenesis",
            "type": 422,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckMortality",
            "type": 423,
            "additionalSigned": 9
          },
          {
            "identifier": "CheckNonce",
            "type": 425,
            "additionalSigned": 37
          },
          {
            "identifier": "CheckWeight",
            "type": 426,
            "additionalSigned": 37
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 427,
            "additionalSigned": 37
          }
        ]
      },
      "type": 428
    }
  }
}
